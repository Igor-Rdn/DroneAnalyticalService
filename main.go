package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"project/packages/mongodb"
	"project/packages/parsing"

	"github.com/gin-gonic/gin"
	"github.com/xuri/excelize/v2"
)

func main() {

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
	collection := mongodb.ConnectToMongoDB()

	router := gin.Default()

	// –ü–∏–Ω–≥-—Ä–æ—É—Ç –¥–ª—è healthcheck
	router.GET("/ping", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{"message": "pong"})
	})

	router.POST("/upload", func(c *gin.Context) {
		fmt.Println("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø MONGODB ===")

		file, err := c.FormFile("excel_file")
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω"})
			return
		}

		uploadedFile, err := file.Open()
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"})
			return
		}
		defer uploadedFile.Close()

		xlsxFile, err := excelize.OpenReader(uploadedFile)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel"})
			return
		}
		defer xlsxFile.Close()

		// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
		sheets := xlsxFile.GetSheetList()
		if len(sheets) == 0 {
			c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ"})
			return
		}

		firstSheet := sheets[0]
		fmt.Printf("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: %s\n", firstSheet)

		rows, err := xlsxFile.GetRows(firstSheet)
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫"})
			return
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫) –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
		var insertedCount int
		for i, row := range rows[1:] {

			flightData := parsing.CreateFlightData(i+1, row)

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
			result, err := collection.InsertOne(context.Background(), flightData)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ %d: %v", i+1, err)
				continue
			}

			fmt.Printf("‚úÖ –°—Ç—Ä–æ–∫–∞ %d —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: %v\n", i+1, result.InsertedID)
			insertedCount++

		}

		fmt.Printf("\nüìà –ò–¢–û–ì: –°—á–∏—Ç–∞–Ω–æ %d —Å—Ç—Ä–æ–∫, —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Å—Ç—Ä–æ–∫\n", len(rows)-1, insertedCount)
		fmt.Println("=== –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´ –í MONGODB ===")

		//http –æ—Ç–≤–µ—Ç
		c.JSON(http.StatusOK, gin.H{
			"message":        "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MongoDB",
			"total_rows":     len(rows) - 1,
			"inserted_count": insertedCount,
			"collection":     "flightData",
		})
	})

	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	router.Run(":8080")

}
