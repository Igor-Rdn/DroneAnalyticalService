package mongodb

import (
	"context"
	"fmt"
	"log"
	"os"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
func ConnectToMongoDB() *mongo.Client {

	uri := os.Getenv("MONGO_URI")
	if uri == "" {
		uri = "mongodb://admin:secret123@localhost:27017/"
	}

	clientOptions := options.Client().ApplyURI(uri)

	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	err = client.Ping(context.Background(), nil)
	if err != nil {
		log.Fatal("‚ùå MongoDB –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞:", err)
	}

	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB")

	fmt.Println("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è searchFields...")
	if err := —ÅreateSearchFieldsIndexes(client); err != nil {
		fmt.Printf("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã: %v", err)
	} else {
		fmt.Println("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
	}

	return client
}

// GetCollection –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ –∏–º–µ–Ω–∏
func GetCollection(client *mongo.Client, databaseName, collectionName string) *mongo.Collection {
	return client.Database(databaseName).Collection(collectionName)
}

func —ÅreateSearchFieldsIndexes(client *mongo.Client) error {
	collection := GetCollection(client, "admin", "flightData")
	ctx := context.Background()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è searchFields
	indexes := []mongo.IndexModel{
		{
			Keys:    bson.D{{Key: "searchFields.dateTime", Value: 1}},
			Options: options.Index().SetName("searchFields_dateTime_1"),
		},
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
	_, err := collection.Indexes().CreateMany(ctx, indexes)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: %v", err)
	}

	return nil
}
