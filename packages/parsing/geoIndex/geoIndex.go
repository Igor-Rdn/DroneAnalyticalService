package geoIndex

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

type GeoJSONGeometry struct {
	Type        string          `json:"type"`
	Coordinates json.RawMessage `json:"coordinates"`
}

type GeoJSONFeature struct {
	Type       string                 `json:"type"`
	Properties map[string]interface{} `json:"properties"`
	Geometry   GeoJSONGeometry        `json:"geometry"`
}

type GeoJSONFile struct {
	Type     string           `json:"type"`
	Features []GeoJSONFeature `json:"features"`
	CRS      interface{}      `json:"crs,omitempty"`
}

// LoadRegionsToMongo –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ GeoJSON —Ñ–∞–π–ª–æ–≤ –≤ MongoDB
func LoadRegionsToMongo(regionsCollection *mongo.Collection) error {

	// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
	exePath, err := os.Executable()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
	}

	// –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ regions-new –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
	regionsDir := filepath.Join(filepath.Dir(exePath), "geojsonFiles")

	if regionsDir == "" {
		log.Println("–Ω–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º GEOJSON")
		return fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º GEOJSON ")
	}

	ctx := context.Background()

	fmt.Printf("üó∫Ô∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ –ø–∞–ø–∫–∏: %s\n", regionsDir)

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö GeoJSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
	files, err := getGeoJSONFiles(regionsDir)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: %v", err)
	}

	fmt.Printf("üìÅ –ù–∞–π–¥–µ–Ω–æ %d GeoJSON —Ñ–∞–π–ª–æ–≤\n", len(files))

	// –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
	_, err = regionsCollection.DeleteMany(ctx, bson.M{})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: %v", err)
	}

	var regionsToInsert []interface{}
	var totalLoadedCount int
	var totalErrorCount int

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
	for _, file := range files {

		loadedCount, errorCount, err := processGeoJSONFile(file, &regionsToInsert)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ %s: %v", file, err)
			totalErrorCount++
			continue
		}

		totalLoadedCount += loadedCount
		totalErrorCount += errorCount

	}

	fmt.Printf("\nüìä –ò–¢–û–ì–ò:\n")
	fmt.Printf("   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d —Ä–µ–≥–∏–æ–Ω–æ–≤\n", totalLoadedCount)
	fmt.Printf("   –° –æ—à–∏–±–∫–∞–º–∏: %d —Ä–µ–≥–∏–æ–Ω–æ–≤\n", totalErrorCount)

	if totalLoadedCount == 0 {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞")
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã
	fmt.Printf("\nüíæ –í—Å—Ç–∞–≤–ª—è–µ–º %d —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ MongoDB...\n", len(regionsToInsert))
	result, err := regionsCollection.InsertMany(ctx, regionsToInsert)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
	}
	fmt.Printf("‚úÖ –í MongoDB –∑–∞–≥—Ä—É–∂–µ–Ω–æ %d —Ä–µ–≥–∏–æ–Ω–æ–≤\n", len(result.InsertedIDs))

	// –°–û–ó–î–ê–ï–ú 2DSPHERE –ò–ù–î–ï–ö–°!
	fmt.Println("üîß –°–æ–∑–¥–∞–µ–º 2dsphere –∏–Ω–¥–µ–∫—Å...")

	indexModel := mongo.IndexModel{
		Keys: bson.D{
			{Key: "geometry", Value: "2dsphere"},
		},
	}

	// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	ctxIndex, cancel := context.WithTimeout(ctx, 60*time.Second)
	defer cancel()

	indexName, err := regionsCollection.Indexes().CreateOne(ctxIndex, indexModel)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è 2dsphere –∏–Ω–¥–µ–∫—Å–∞: %v", err)
	}

	fmt.Printf("‚úÖ 2dsphere –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: %s\n", indexName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–ª—Å—è
	cursor, err := regionsCollection.Indexes().List(ctx)
	if err == nil {
		var indexes []bson.M
		cursor.All(ctx, &indexes)
		fmt.Printf("üîç –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: %d\n", len(indexes))
		for _, index := range indexes {
			if key, ok := index["key"].(bson.M); ok {
				if _, hasGeo := key["geometry"]; hasGeo {
					fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω 2dsphere –∏–Ω–¥–µ–∫—Å: %v\n", index["name"])
				}
			}
		}
	}

	return nil
}

// getGeoJSONFiles –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö GeoJSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
func getGeoJSONFiles(dirPath string) ([]string, error) {
	var files []string

	err := filepath.Walk(dirPath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		if info.IsDir() {
			return nil
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
		ext := strings.ToLower(filepath.Ext(path))
		if ext == ".geojson" || ext == ".json" {
			files = append(files, path)
		}

		return nil
	})

	if err != nil {
		return nil, err
	}

	return files, nil
}

// processGeoJSONFile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω GeoJSON —Ñ–∞–π–ª
func processGeoJSONFile(filePath string, regionsToInsert *[]interface{}) (int, int, error) {
	// –ß–∏—Ç–∞–µ–º GeoJSON —Ñ–∞–π–ª
	data, err := os.ReadFile(filePath)
	if err != nil {
		return 0, 0, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	var geoJSONFile GeoJSONFile
	err = json.Unmarshal(data, &geoJSONFile)
	if err != nil {
		return 0, 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	var loadedCount int
	var errorCount int

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ñ–∏—á—É –≤ —Ñ–∞–π–ª–µ
	for i, feature := range geoJSONFile.Features {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –ø–æ–ª—è "official_name:ru"
		regionName := extractOfficialName(feature.Properties)
		if regionName == "" {
			// –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ
			regionName = extractRegionName(feature.Properties, i)
			if regionName == "" {
				log.Printf("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –≤ —Ñ–∞–π–ª–µ %s", filepath.Base(filePath))
				errorCount++
				continue
			}
		}

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç MongoDB
		mongoGeometry, err := convertGeoJSONGeometry(feature.Geometry)
		if err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ %s: %v", regionName, err)
			errorCount++
			continue
		}

		if mongoGeometry == nil {
			log.Printf("‚ö†Ô∏è –ü—É—Å—Ç–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ %s", regionName)
			errorCount++
			continue
		}

		// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
		if err := validateGeometry(mongoGeometry); err != nil {
			log.Printf("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ %s: %v", regionName, err)
			errorCount++
			continue
		}

		// –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Ä–µ–≥–∏–æ–Ω–∞
		regionDoc := bson.M{
			"name":     regionName,
			"geometry": mongoGeometry,
		}

		*regionsToInsert = append(*regionsToInsert, regionDoc)
		loadedCount++

	}

	return loadedCount, errorCount, nil
}

// extractOfficialName –∏–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –ø–æ–ª—è "official_name:ru"
func extractOfficialName(properties map[string]interface{}) string {
	if properties == nil {
		return ""
	}

	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª–µ "official_name:ru"
	if officialName, exists := properties["official_name:ru"]; exists {
		if name, ok := officialName.(string); ok && name != "" {
			return name
		}
	}

	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª–µ "official_name" (–±–µ–∑ —è–∑—ã–∫–∞)
	if officialName, exists := properties["official_name"]; exists {
		if name, ok := officialName.(string); ok && name != "" {
			return name
		}
	}

	return ""
}

// extractRegionName –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ properties (fallback)
func extractRegionName(properties map[string]interface{}, index int) string {
	if properties == nil {
		return fmt.Sprintf("–†–µ–≥–∏–æ–Ω_%d", index+1)
	}

	// –ü—Ä–æ–±—É–µ–º –ø–æ–ª–µ "region" –≤ properties
	if regionValue, exists := properties["region"]; exists {
		if regionName, ok := regionValue.(string); ok && regionName != "" {
			return regionName
		}
	}

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
	possibleKeys := []string{
		"alt_name:ru", "alt_name",
		"name:ru", "name",
		"int_name", "NAME",
		"region_name", "subject",
	}

	for _, key := range possibleKeys {
		if value, exists := properties[key]; exists {
			if name, ok := value.(string); ok && name != "" {
				return name
			}
		}
	}

	return fmt.Sprintf("–†–µ–≥–∏–æ–Ω_%d", index+1)
}

// convertGeoJSONGeometry –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–∑ GeoJSON –≤ —Ñ–æ—Ä–º–∞—Ç MongoDB
func convertGeoJSONGeometry(geometry GeoJSONGeometry) (bson.M, error) {
	result := bson.M{
		"type": geometry.Type,
	}

	switch geometry.Type {
	case "Point":
		var coords []float64
		if err := json.Unmarshal(geometry.Coordinates, &coords); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Point –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: %v", err)
		}
		result["coordinates"] = coords

	case "LineString":
		var coords [][]float64
		if err := json.Unmarshal(geometry.Coordinates, &coords); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LineString –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: %v", err)
		}
		result["coordinates"] = coords

	case "Polygon":
		var coords [][][]float64
		if err := json.Unmarshal(geometry.Coordinates, &coords); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Polygon –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: %v", err)
		}
		result["coordinates"] = coords

	case "MultiPolygon":
		var coords [][][][]float64
		if err := json.Unmarshal(geometry.Coordinates, &coords); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ MultiPolygon –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: %v", err)
		}
		result["coordinates"] = coords

	default:
		return nil, fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏: %s", geometry.Type)
	}

	return result, nil
}

// validateGeometry –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—é –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ MongoDB
func validateGeometry(geometry bson.M) error {
	if geometry == nil {
		return fmt.Errorf("–≥–µ–æ–º–µ—Ç—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å nil")
	}

	geoType, ok := geometry["type"].(string)
	if !ok {
		return fmt.Errorf("–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏")
	}

	coords, ok := geometry["coordinates"]
	if !ok {
		return fmt.Errorf("–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
	}

	switch geoType {
	case "Point":
		if points, ok := coords.([]float64); !ok || len(points) != 2 {
			return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è Point")
		}
	case "LineString":
		if points, ok := coords.([][]float64); !ok || len(points) < 2 {
			return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è LineString")
		}
	case "Polygon":
		if rings, ok := coords.([][][]float64); !ok || len(rings) == 0 {
			return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è Polygon")
		}
		if rings, ok := coords.([][][]float64); ok && len(rings) > 0 {
			outerRing := rings[0]
			if len(outerRing) < 4 {
				return fmt.Errorf("–ø–æ–ª–∏–≥–æ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 4 —Ç–æ—á–∫–∏")
			}
			first := outerRing[0]
			last := outerRing[len(outerRing)-1]
			if first[0] != last[0] || first[1] != last[1] {
				return fmt.Errorf("–ø–æ–ª–∏–≥–æ–Ω –Ω–µ –∑–∞–º–∫–Ω—É—Ç")
			}
		}
	case "MultiPolygon":
		if polygons, ok := coords.([][][][]float64); !ok || len(polygons) == 0 {
			return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è MultiPolygon")
		}
	default:
		return fmt.Errorf("–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≥–µ–æ–º–µ—Ç—Ä–∏–∏: %s", geoType)
	}

	return nil
}
