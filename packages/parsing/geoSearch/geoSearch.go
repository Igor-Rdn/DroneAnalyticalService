package geoSearch

import (
	"context"
	"fmt"
	"log"
	"runtime"
	"sync"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// GeoService —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å 2dsphere –∏–Ω–¥–µ–∫—Å–æ–º

// FlightData —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–µ
type FlightData struct {
	ID        primitive.ObjectID `bson:"_id"`
	Departure struct {
		Coordinates *Coordinate `bson:"coordinates,omitempty"`
	} `bson:"dep"`
	SHRData struct {
		CoordinatesDep *Coordinate `bson:"coordinatesDep,omitempty"`
	} `bson:"shr"`
}

// UpdateOperation –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
type UpdateOperation struct {
	ID      primitive.ObjectID
	Subject string
}

// Coordinate —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
type Coordinate struct {
	Lat float64 `bson:"lat"`
	Lon float64 `bson:"lon"`
}

// GeoService —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–æ–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å 2dsphere –∏–Ω–¥–µ–∫—Å–æ–º
type GeoService struct {
	client            *mongo.Client
	regionsCollection *mongo.Collection
	cache             *RegionCache // –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
}

// RegionCache –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
type RegionCache struct {
	sync.RWMutex
	data map[CacheKey]string
}

type CacheKey struct {
	lat float64
	lon float64
}

// NewGeoService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –≥–µ–æ—Å–µ—Ä–≤–∏—Å
func NewGeoService(client *mongo.Client) *GeoService {
	return &GeoService{
		client:            client,
		regionsCollection: client.Database("admin").Collection("regionsGeo"),
		cache: &RegionCache{
			data: make(map[CacheKey]string),
		},
	}
}

// FindRegionForPoint –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 2dsphere –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
func (gs *GeoService) FindRegionForPoint(lat, lon float64) (string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
	if cached := gs.getFromCache(lat, lon); cached != "" {
		return cached, nil
	}

	ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second) // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç
	defer cancel()

	// GeoJSON —Ç–æ—á–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
	point := bson.M{
		"type":        "Point",
		"coordinates": []float64{lon, lat},
	}

	// –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ü–†–û–° - –∏—Å–ø–æ–ª—å–∑—É–µ–º Find –≤–º–µ—Å—Ç–æ Aggregate
	filter := bson.M{
		"geometry": bson.M{
			"$geoIntersects": bson.M{
				"$geometry": point,
			},
		},
	}

	opts := options.FindOne().
		SetProjection(bson.M{"name": 1}).
		SetMaxTime(3 * time.Second) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

	regionName := "–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

	var result bson.M
	if err := gs.regionsCollection.FindOne(ctx, filter, opts).Decode(&result); err != nil {
		return regionName, nil
	}

	if name, ok := result["name"].(string); ok {
		regionName = name
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
	gs.setCache(lat, lon, regionName)

	return regionName, nil
}

// FindRegionsForPointsBatch –ø–∞–∫–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–æ—á–µ–∫
func (gs *GeoService) FindRegionsForPointsBatch(points []struct {
	Lat float64
	Lon float64
	ID  primitive.ObjectID
}) (map[primitive.ObjectID]string, error) {
	results := make(map[primitive.ObjectID]string)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	for _, point := range points {
		if cached := gs.getFromCache(point.Lat, point.Lon); cached != "" {
			results[point.ID] = cached
		}
	}

	// –ï—Å–ª–∏ –≤—Å–µ —Ç–æ—á–∫–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if len(results) == len(points) {
		return results, nil
	}

	// –ò—â–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ—á–∫–∏ –≤ –±–∞–∑–µ
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è $or –∑–∞–ø—Ä–æ—Å–∞
	var orConditions []bson.M
	pointMap := make(map[string]primitive.ObjectID) // –î–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫ —Å ID

	for _, point := range points {
		if _, exists := results[point.ID]; exists {
			continue // –£–∂–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ
		}

		pointKey := fmt.Sprintf("%.6f:%.6f", point.Lat, point.Lon)
		pointMap[pointKey] = point.ID

		orConditions = append(orConditions, bson.M{
			"geometry": bson.M{
				"$geoIntersects": bson.M{
					"$geometry": bson.M{
						"type":        "Point",
						"coordinates": []float64{point.Lon, point.Lat},
					},
				},
			},
		})
	}

	if len(orConditions) == 0 {
		return results, nil
	}

	filter := bson.M{"$or": orConditions}
	opts := options.Find().SetProjection(bson.M{"name": 1})

	cursor, err := gs.regionsCollection.Find(ctx, filter, opts)
	if err != nil {
		return results, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: %v", err)
	}
	defer cursor.Close(ctx)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	for cursor.Next(ctx) {
		var doc bson.M
		if err := cursor.Decode(&doc); err != nil {
			continue
		}

		// –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Ç–æ—á–∫–∞–º–∏
		// –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å $geoWithin
	}

	return results, nil
}

// getFromCache –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
func (gs *GeoService) getFromCache(lat, lon float64) string {
	gs.cache.RLock()
	defer gs.cache.RUnlock()

	key := CacheKey{lat: lat, lon: lon}
	if value, exists := gs.cache.data[key]; exists {
		return value
	}
	return ""
}

// setCache —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à
func (gs *GeoService) setCache(lat, lon float64, value string) {
	gs.cache.Lock()
	defer gs.cache.Unlock()

	key := CacheKey{lat: lat, lon: lon}
	gs.cache.data[key] = value

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	if len(gs.cache.data) > 10000 {
		// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –æ—á–∏—â–∞–µ–º –∫—ç—à –∫–æ–≥–¥–∞ –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
		gs.cache.data = make(map[CacheKey]string)
	}
}

// UpdateFlightRegions –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≤–µ—Ä—Å–∏—è
func UpdateFlightRegions(client *mongo.Client) error {
	geoService := NewGeoService(client)
	flightDataCollection := geoService.client.Database("admin").Collection("flightData")
	ctx := context.Background()

	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å 2dsphere –∏–Ω–¥–µ–∫—Å–æ–º...")

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ª–∏—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
	opts := options.Find().SetProjection(bson.M{
		"_id": 1,
		"dep": 1,
		"shr": 1,
	})

	cursor, err := flightDataCollection.Find(ctx, bson.M{}, opts)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ—Ç–æ–≤: %v", err)
	}
	defer cursor.Close(ctx)

	startTime := time.Now()

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	jobs := make(chan FlightData, 20000)
	results := make(chan UpdateOperation, 20000)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –µ—Å–ª–∏ CPU –ø–æ–∑–≤–æ–ª—è–µ—Ç
	numWorkers := runtime.NumCPU() // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
	batchSize := 2000              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞

	// –ó–∞–ø—É—Å–∫–∞–µ–º worker'–æ–≤
	var wgWorkers sync.WaitGroup
	for i := 0; i < numWorkers; i++ {
		wgWorkers.Add(1)
		go geoService.regionWorkerOptimized(i, jobs, results, &wgWorkers)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	var wgCollector sync.WaitGroup
	wgCollector.Add(1)
	collectorErr := make(chan error, 1)

	go func() {
		defer wgCollector.Done()
		err := geoService.resultCollectorOptimized(flightDataCollection, results, startTime, batchSize)
		if err != nil {
			collectorErr <- err
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ workers
	var sentCount int
	var lastLogTime = time.Now()

	for cursor.Next(ctx) {
		var flightData FlightData
		if err := cursor.Decode(&flightData); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
			continue
		}

		jobs <- flightData
		sentCount++

		// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
		if sentCount%10000 == 0 || time.Since(lastLogTime) > 2*time.Second {
			elapsed := time.Since(startTime)
			speed := float64(sentCount) / elapsed.Seconds()
			fmt.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d | –°–∫–æ—Ä–æ—Å—Ç—å: %.1f doc/—Å–µ–∫\n", sentCount, speed)
			lastLogTime = time.Now()
		}
	}

	// –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
	close(jobs)
	wgWorkers.Wait()
	close(results)
	wgCollector.Wait()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ —Å–±–æ—Ä—â–∏–∫–∞
	select {
	case err := <-collectorErr:
		return err
	default:
	}

	totalTime := time.Since(startTime)
	fmt.Printf("\nüéâ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!\n")
	fmt.Printf("üìä –ò–¢–û–ì–ò:\n")
	fmt.Printf("   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: %d\n", sentCount)
	fmt.Printf("   –û–±—â–µ–µ –≤—Ä–µ–º—è: %v\n", totalTime.Round(time.Second))
	fmt.Printf("   –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: %.1f –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/—Å–µ–∫\n", float64(sentCount)/totalTime.Seconds())

	return nil
}

// regionWorkerOptimized –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ—Ä–∫–µ—Ä
func (gs *GeoService) regionWorkerOptimized(id int, jobs <-chan FlightData, results chan<- UpdateOperation, wg *sync.WaitGroup) {
	defer wg.Done()

	var processed int
	var batch []FlightData
	batchSize := 50 // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–º–∏ –±–∞—Ç—á–∞–º–∏

	for job := range jobs {
		batch = append(batch, job)

		if len(batch) >= batchSize {
			gs.processBatch(batch, results)
			processed += len(batch)
			batch = batch[:0] // –û—á–∏—â–∞–µ–º batch
		}
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
	if len(batch) > 0 {
		gs.processBatch(batch, results)
		processed += len(batch)
	}

	fmt.Printf("  ‚úÖ Worker %d –∑–∞–≤–µ—Ä—à–∏–ª (%d –∑–∞–ø–∏—Å–µ–π)\n", id, processed)
}

// processBatch –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á —Ç–æ—á–µ–∫
func (gs *GeoService) processBatch(batch []FlightData, results chan<- UpdateOperation) {
	for _, job := range batch {
		var subjectName string = "–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
		var lat, lon float64
		if job.Departure.Coordinates != nil {
			lat = job.Departure.Coordinates.Lat
			lon = job.Departure.Coordinates.Lon
		} else if job.SHRData.CoordinatesDep != nil {
			lat = job.SHRData.CoordinatesDep.Lat
			lon = job.SHRData.CoordinatesDep.Lon
		}

		// –ò—â–µ–º —Ä–µ–≥–∏–æ–Ω —á–µ—Ä–µ–∑ 2dsphere –∏–Ω–¥–µ–∫—Å
		if lat != 0 || lon != 0 {
			if regionName, err := gs.FindRegionForPoint(lat, lon); err == nil {
				subjectName = regionName
			}
		}

		results <- UpdateOperation{
			ID:      job.ID,
			Subject: subjectName,
		}
	}
}

// resultCollectorOptimized –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–±–æ—Ä—â–∏–∫
func (gs *GeoService) resultCollectorOptimized(
	collection *mongo.Collection,
	results <-chan UpdateOperation,
	startTime time.Time,
	batchSize int,
) error {
	var operations []mongo.WriteModel
	var processedCount int
	var lastLogTime = time.Now()

	for result := range results {
		processedCount++

		update := mongo.NewUpdateOneModel().
			SetFilter(bson.M{"_id": result.ID}).
			SetUpdate(bson.M{"$set": bson.M{"region": result.Subject}})
		operations = append(operations, update)

		if len(operations) >= batchSize {
			if err := gs.executeBulkUpdateOptimized(collection, operations); err != nil {
				return fmt.Errorf("–æ—à–∏–±–∫–∞ bulk update: %v", err)
			}
			operations = []mongo.WriteModel{}
		}

		if processedCount%5000 == 0 || time.Since(lastLogTime) > 2*time.Second {
			elapsed := time.Since(startTime)
			speed := float64(processedCount) / elapsed.Seconds()
			fmt.Printf("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d | –°–∫–æ—Ä–æ—Å—Ç—å: %.1f doc/—Å–µ–∫\n", processedCount, speed)
			lastLogTime = time.Now()
		}
	}

	if len(operations) > 0 {
		if err := gs.executeBulkUpdateOptimized(collection, operations); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ bulk update: %v", err)
		}
	}

	fmt.Printf("‚úÖ –°–±–æ—Ä—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (%d –∑–∞–ø–∏—Å–µ–π)\n", processedCount)
	return nil
}

// executeBulkUpdateOptimized –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è bulk –æ–ø–µ—Ä–∞—Ü–∏—è
func (gs *GeoService) executeBulkUpdateOptimized(collection *mongo.Collection, operations []mongo.WriteModel) error {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second) // –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç
	defer cancel()

	_, err := collection.BulkWrite(ctx, operations)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ bulk update (%d –æ–ø–µ—Ä–∞—Ü–∏–π): %v", len(operations), err)
	}

	return nil
}
