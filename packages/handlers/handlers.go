package handlers

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"project/packages/auth"
	"project/packages/mongodb"
	"project/packages/parsing"
	"project/packages/parsing/geoGet"
	"project/packages/parsing/geoIndex"
	"project/packages/parsing/geoSearch"
	"runtime"

	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/tealeg/xlsx"

	"github.com/xuri/excelize/v2"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type useTables struct {
	flightDataCollection       *mongo.Collection
	regionListCollection       *mongo.Collection
	aircraftTypeListCollection *mongo.Collection
	subjectListCollection      *mongo.Collection
}

var (
	initOnce sync.Once
)

func RegisterRoutes(r *gin.Engine, client *mongo.Client) {

	var tables = useTables{
		mongodb.GetCollection(client, "admin", "flightData"),
		mongodb.GetCollection(client, "admin", "regionList"),
		mongodb.GetCollection(client, "admin", "aircraftTypeList"),
		mongodb.GetCollection(client, "admin", "regionsGeo"),
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
	serverInit(tables)

	r.GET("/ping", healthCheck)
	r.GET("/exists-data", func(c *gin.Context) { existsData(c, tables) })
	r.GET("/regions", func(c *gin.Context) { getRegionList(c, tables) })
	r.GET("/regions/geojson", func(c *gin.Context) { getRegionsGeo(c, tables) })
	r.GET("/flights-table", func(c *gin.Context) { getFlightTable(c, tables) })
	r.GET("/flights-table/export", func(c *gin.Context) { exportFlightTable(c, tables) })
	r.GET("/heatmap", func(c *gin.Context) { getHeatmapData(c, tables) })
	r.GET("/peak-hour", func(c *gin.Context) { getPeakHour(c, tables) })
	r.GET("/region/yearly-stats", func(c *gin.Context) { getYearlyStats(c, tables) })
	r.GET("/avg-flight-duration", func(c *gin.Context) { getAvgFlightDuration(c, tables) })
	r.GET("/top-10", func(c *gin.Context) { getTop10Regions(c, tables) })
	r.GET("/flight-count", func(c *gin.Context) { getFlightCount(c, tables) })

	r.POST("/clear-table", func(c *gin.Context) { clearTable(tables) })
	r.POST("/upload", auth.RequireRealmRole("admin"), func(c *gin.Context) {
		uploadFiles(c, tables, client)
		updateAircraftTypeList(tables)
		/* 		err := geoSearch.UpdateFlightRegions(client)
		   		if err != nil {
		   			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è —Ä–µ–≥–∏–æ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã : %v\n", err)
		   		} */
	})
	// –û—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ —É –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
	r.POST("/subject", func(c *gin.Context) {
		if err := geoSearch.UpdateFlightRegions(client); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}
		c.JSON(http.StatusOK, gin.H{"message": "–°—É–±—ä–µ–∫—Ç—ã –†–§ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"})
	})
	// –û—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ 2dsphere –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
	r.POST("/geoindex", func(c *gin.Context) {
		if err := geoIndex.LoadRegionsToMongo(tables.subjectListCollection); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}

		updateRegionList(tables)
		c.JSON(http.StatusOK, gin.H{"message": "–ì–µ–æ-–∏–Ω–¥–µ–∫—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã"})
	})

}

// getRegionsGeo handler –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
func getRegionsGeo(c *gin.Context, tables useTables) {

	regions, err := geoGet.GetRegionsGeo(tables.subjectListCollection)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ get –∑–∞–ø—Ä–æ—Å–∞ –ø–æ geojson: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ geojson"})
		return
	}
	c.JSON(http.StatusOK, regions)
}

func serverInit(collection useTables) {

	subjectListCollection := collection.subjectListCollection

	initOnce.Do(func() {
		fmt.Println("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞...")

		needsGeoIndex, err := isCollectionEmpty(subjectListCollection)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ regionsGeo: %v\n", err)
			return
		}
		if needsGeoIndex {
			// –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–µ–æ-–∏–Ω–¥–µ–∫—Å—ã
			if err := geoIndex.LoadRegionsToMongo(subjectListCollection); err != nil {
				fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–µ–æ-–∏–Ω–¥–µ–∫—Å–æ–≤: %v", err)
			}
		}
		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
		updateRegionList(collection)
	})

}

// isCollectionEmpty –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞—è –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
func isCollectionEmpty(collection *mongo.Collection) (bool, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
	count, err := collection.CountDocuments(ctx, bson.M{})
	if err != nil {
		return false, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: %v", err)
	}

	return count == 0, nil
}

func existsData(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection
	ctx := context.Background()

	fmt.Printf("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ flightData\n")

	// –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç
	var result bson.M
	err := flightDataCollection.FindOne(ctx, bson.M{}).Decode(&result)

	rowCount := 0
	if err == nil {
		rowCount = 1
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –æ–±—â–µ–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ
	response := bson.M{
		"rowCount": rowCount,
	}

	c.JSON(http.StatusOK, response)
}

func clearTable(collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é flightData
	ctx := context.Background()
	_, err := flightDataCollection.DeleteMany(ctx, bson.M{})
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ flightData: %v", err)
	}
	fmt.Println("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è flightData –æ—á–∏—â–µ–Ω–∞")
	//–ö–æ–Ω–µ—Ü –æ—á–∏—Å—Ç–∫–∏ –£–î–ê–õ–ò–¢–¨ –ü–û–°–õ–ï –û–ö–û–ù–ß–ê–ù–ò–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò
}

func getFlightTable(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection
	aircraftTypeCollection := collection.aircraftTypeListCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	page := c.DefaultQuery("page", "1")
	limit := c.DefaultQuery("limit", "20")

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
	timezone := c.Query("timezone")

	pageInt, err := strconv.Atoi(page)
	if err != nil || pageInt < 1 {
		pageInt = 1
	}

	limitInt, err := strconv.Atoi(limit)
	if err != nil || limitInt < 1 {
		limitInt = 50
	}
	if limitInt > 1000 {
		limitInt = 1000
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
	aircraftType := c.Query("aircraftType")
	dateDepFrom := c.Query("dateDepFrom")
	dateDepTo := c.Query("dateDepTo")
	flightDurationMin := c.Query("flightDurationMin")
	flightDurationMax := c.Query("flightDurationMax")
	sid := c.Query("sid")
	region := c.Query("region")
	operatorType := c.Query("operatorType")

	// –í—ã—á–∏—Å–ª—è–µ–º skip
	skip := (pageInt - 1) * limitInt

	ctx := context.Background()

	fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª–µ—Ç–æ–≤ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d, –ª–∏–º–∏—Ç %d\n", pageInt, limitInt)

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
	filter := bson.M{}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
	if aircraftType != "" {
		// –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
		aircraftTypes := strings.Split(aircraftType, ",")
		// –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
		for i, at := range aircraftTypes {
			aircraftTypes[i] = strings.TrimSpace(at)
		}
		// –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
		if len(aircraftTypes) == 1 {
			filter["shr.aircraftType"] = aircraftTypes[0]
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º $in
			filter["shr.aircraftType"] = bson.M{"$in": aircraftTypes}
		}
		fmt.Printf("‚úàÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Å–∞–º–æ–ª–µ—Ç–æ–≤: %v\n", aircraftTypes)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
	if operatorType != "" {
		// –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
		operatorTypes := strings.Split(operatorType, ",")
		// –û—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
		for i, at := range operatorTypes {
			operatorTypes[i] = strings.TrimSpace(at)
		}
		// –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
		if len(operatorTypes) == 1 {
			filter["shr.operatorType"] = operatorTypes[0]
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º $in
			filter["shr.operatorType"] = bson.M{"$in": operatorTypes}
		}
		fmt.Printf("‚úàÔ∏è –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º —Å–∞–º–æ–ª–µ—Ç–æ–≤: %v\n", operatorTypes)
	}

	start, _ := time.Parse(time.RFC3339, dateDepFrom)
	end, _ := time.Parse(time.RFC3339, dateDepTo)

	if dateDepFrom != "" {
		if dateDepTo != "" {
			filter["searchFields.dateTime"] = bson.M{
				"$gte": start,
				"$lte": end,
			}
		} else {
			filter["searchFields.dateTime"] = bson.M{"$gte": start}
		}
	} else if dateDepTo != "" {
		filter["searchFields.dateTime"] = bson.M{"$lte": end}
	}

	if sid != "" {
		if sidInt, err := strconv.Atoi(sid); err == nil {
			filter["shr.sid"] = sidInt
		} else {
			fmt.Printf("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç sid: %s\n", sid)
		}
	}

	if flightDurationMin != "" {
		durationMin, err := strconv.Atoi(flightDurationMin)
		if err == nil {
			if flightDurationMax != "" {
				durationMax, err := strconv.Atoi(flightDurationMax)
				if err == nil {
					// –ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = 0, –≤–∫–ª—é—á–∞–µ–º —Ç–∞–∫–∂–µ null –∑–Ω–∞—á–µ–Ω–∏—è
					if durationMin == 0 {
						filter["$or"] = []bson.M{
							{"shr.flightDuration": bson.M{"$gte": durationMin, "$lte": durationMax}},
							{"shr.flightDuration": nil},
						}
					} else {
						filter["shr.flightDuration"] = bson.M{
							"$gte": durationMin,
							"$lte": durationMax,
						}
					}
				}
			} else {
				// –ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = 0, –≤–∫–ª—é—á–∞–µ–º —Ç–∞–∫–∂–µ null –∑–Ω–∞—á–µ–Ω–∏—è
				if durationMin == 0 {
					filter["$or"] = []bson.M{
						{"shr.flightDuration": bson.M{"$gte": durationMin}},
						{"shr.flightDuration": nil},
					}
				} else {
					filter["shr.flightDuration"] = bson.M{"$gte": durationMin}
				}
			}
		}
	} else if flightDurationMax != "" {
		durationMax, err := strconv.Atoi(flightDurationMax)
		if err == nil {
			// –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∂–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å null, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			filter["shr.flightDuration"] = bson.M{"$lte": durationMax}
		}
	}

	if region != "" {
		filter["region"] = region
	}

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é match –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
	if len(filter) > 0 {
		pipeline = append(pipeline, bson.D{{Key: "$match", Value: filter}})
	}

	// –ü—Ä–æ–µ–∫—Ü–∏—è –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
	projectFields := bson.M{
		"region":           1,
		"sid":              "$shr.sid",
		"aircraftIndex":    "$shr.aircraftIndex",
		"aircraftType":     "$shr.aircraftType",
		"aircraftQuantity": "$shr.aircraftQuantity",
		"operator":         "$shr.operator",
		"operatorType":     "$shr.operatorType",
		"flightDuration":   "$shr.flightDuration",
		"coordinatesDep": bson.M{
			"$let": bson.M{
				"vars": bson.M{
					"depCoords": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ifNull": bson.A{"$dep.coordinates.lat", false}},
								bson.M{"$ifNull": bson.A{"$dep.coordinates.lon", false}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$dep.coordinates.lat"},
									" ",
									bson.M{"$toString": "$dep.coordinates.lon"},
								},
							},
							"else": nil,
						},
					},
					"shrCoords": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ifNull": bson.A{"$shr.coordinatesDep.lat", false}},
								bson.M{"$ifNull": bson.A{"$shr.coordinatesDep.lon", false}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$shr.coordinatesDep.lat"},
									" ",
									bson.M{"$toString": "$shr.coordinatesDep.lon"},
								},
							},
							"else": nil,
						},
					},
				},
				"in": bson.M{"$ifNull": bson.A{"$$depCoords", "$$shrCoords"}},
			},
		},
		"coordinatesArr": bson.M{
			"$let": bson.M{
				"vars": bson.M{
					"arrCoords": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ifNull": bson.A{"$arr.coordinates.lat", false}},
								bson.M{"$ifNull": bson.A{"$arr.coordinates.lon", false}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$arr.coordinates.lat"},
									" ",
									bson.M{"$toString": "$arr.coordinates.lon"},
								},
							},
							"else": nil,
						},
					},
					"shrCoords": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ifNull": bson.A{"$shr.coordinatesArr.lat", false}},
								bson.M{"$ifNull": bson.A{"$shr.coordinatesArr.lon", false}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$shr.coordinatesArr.lat"},
									" ",
									bson.M{"$toString": "$shr.coordinatesArr.lon"},
								},
							},
							"else": nil,
						},
					},
				},
				"in": bson.M{"$ifNull": bson.A{"$$arrCoords", "$$shrCoords"}},
			},
		},
		//"rawText": "$shr.rawText",
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–∞—Ç —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
	if timezone != "" {
		// –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
		offsetHours := getTimezoneOffset(timezone)

		projectFields["dateDep"] = bson.M{
			"$cond": bson.M{
				"if": bson.M{"$ne": bson.A{"$searchFields.dateTime", nil}},
				"then": bson.M{"$dateToString": bson.M{
					"date":   bson.M{"$add": bson.A{"$searchFields.dateTime", offsetHours * 60 * 60 * 1000}}, // —Å–º–µ—â–µ–Ω–∏–µ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
					"format": "%Y-%m-%dT%H:%M:%S.%LZ",
				}},
				"else": nil,
			},
		}
		projectFields["dateArr"] = bson.M{
			"$cond": bson.M{
				"if": bson.M{"$ne": bson.A{"$searchFields.arrDatetime", nil}},
				"then": bson.M{"$dateToString": bson.M{
					"date":   bson.M{"$add": bson.A{"$searchFields.arrDatetime", offsetHours * 60 * 60 * 1000}}, // —Å–º–µ—â–µ–Ω–∏–µ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
					"format": "%Y-%m-%dT%H:%M:%S.%LZ",
				}},
				"else": nil,
			},
		}
	} else {
		// –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
		projectFields["dateDep"] = "$searchFields.dateTime"
		projectFields["dateArr"] = "$searchFields.arrDatetime"
	}

	// –ü—Ä–æ–µ–∫—Ü–∏—è –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
	pipeline = append(pipeline, bson.D{{Key: "$project", Value: projectFields}})

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ sid
	pipeline = append(pipeline, bson.D{{Key: "$sort", Value: bson.M{"sid": 1}}})

	// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
	pipeline = append(pipeline, bson.D{{Key: "$skip", Value: skip}})
	pipeline = append(pipeline, bson.D{{Key: "$limit", Value: limitInt}})

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
	countFilter := filter
	totalCount, err := flightDataCollection.CountDocuments(ctx, countFilter)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: %v\n", err)
		totalCount = 0
	}

	// –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
	var filtersMeta bson.M

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ aircraftTypes
	aircraftTypesCursor, err := aircraftTypeCollection.Find(ctx, bson.M{})
	var aircraftTypes []string
	if err == nil {
		defer aircraftTypesCursor.Close(ctx)
		var types []bson.M
		if err := aircraftTypesCursor.All(ctx, &types); err == nil {
			for _, t := range types {
				if aircraftType, ok := t["aircraftType"].(string); ok {
					aircraftTypes = append(aircraftTypes, aircraftType)
				}
			}
		}
	}

	operatorTypes := []string{"–Æ—Ä. –ª–∏—Ü–æ", "–§–∏–∑. –ª–∏—Ü–æ", "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"}

	maxDurationPipeline := mongo.Pipeline{
		{
			{Key: "$group", Value: bson.M{
				"_id":               nil,
				"maxFlightDuration": bson.M{"$max": "$shr.flightDuration"},
			}},
		},
	}

	maxDurationCursor, err := flightDataCollection.Aggregate(ctx, maxDurationPipeline)
	var maxFlightDuration int = 0
	if err == nil {
		defer maxDurationCursor.Close(ctx)
		var maxResults []bson.M
		if err := maxDurationCursor.All(ctx, &maxResults); err == nil && len(maxResults) > 0 {
			maxFlightDuration = int(maxResults[0]["maxFlightDuration"].(float64))
		}
	} else {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è maxFlightDuration: %v\n", err)
	}

	fmt.Printf("üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ –ø–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ: %d\n", maxFlightDuration)

	filtersMeta = bson.M{
		"aircraftTypes":     aircraftTypes,
		"maxFlightDuration": maxFlightDuration,
		"operatorTypes":     operatorTypes,
	}

	fmt.Printf("üìà –ü–æ–ª—É—á–µ–Ω–æ %d –∑–∞–ø–∏—Å–µ–π –∏–∑ %d (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d)\n", len(results), totalCount, pageInt)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
	response := bson.M{
		"data": results,
		"pagination": bson.M{
			"page":       pageInt,
			"limit":      limitInt,
			"total":      totalCount,
			"totalPages": (totalCount + int64(limitInt) - 1) / int64(limitInt),
		},
		"filtersMeta": filtersMeta,
	}

	c.JSON(http.StatusOK, response)
}

// getTimezoneOffset –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –≤ —á–∞—Å–∞—Ö
func getTimezoneOffset(timezone string) int64 {

	russianTimezones := map[string]int64{
		"Europe/Kaliningrad": -2,  // UTC+2 - –ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
		"Europe/Moscow":      -3,  // UTC+3 - –ú–æ—Å–∫–≤–∞, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –†–æ—Å—Å–∏—è
		"Europe/Samara":      -4,  // UTC+4 - –°–∞–º–∞—Ä–∞, –£–¥–º—É—Ä—Ç–∏—è
		"Asia/Yekaterinburg": -5,  // UTC+5 - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –£—Ä–∞–ª
		"Asia/Omsk":          -6,  // UTC+6 - –û–º—Å–∫, –ó–∞–ø–∞–¥–Ω–∞—è –°–∏–±–∏—Ä—å
		"Asia/Krasnoyarsk":   -7,  // UTC+7 - –ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫, –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –°–∏–±–∏—Ä—å
		"Asia/Irkutsk":       -8,  // UTC+8 - –ò—Ä–∫—É—Ç—Å–∫, –í–æ—Å—Ç–æ—á–Ω–∞—è –°–∏–±–∏—Ä—å
		"Asia/Chita":         -9,  // UTC+9 - –ß–∏—Ç–∞, –ó–∞–±–∞–π–∫–∞–ª—å–µ
		"Asia/Vladivostok":   -10, // UTC+10 - –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫, –ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π
		"Asia/Magadan":       -11, // UTC+11 - –ú–∞–≥–∞–¥–∞–Ω, –ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
		"Asia/Kamchatka":     -12, // UTC+12 - –ö–∞–º—á–∞—Ç–∫–∞
		"Asia/Anadyr":        -12, // UTC+12 - –ê–Ω–∞–¥—ã—Ä—å, –ß—É–∫–æ—Ç–∫–∞
		"Europe/Volgograd":   -3,  // UTC+3 - –í–æ–ª–≥–æ–≥—Ä–∞–¥
		"Europe/Astrakhan":   -4,  // UTC+4 - –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å
		"UTC":                0,   // UTC+0
	}

	if offset, exists := russianTimezones[timezone]; exists {
		return offset
	}

	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC
	return 0
}

func getYearlyStats(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	region := c.Query("region")
	from := c.Query("from")
	to := c.Query("to")

	if region == "" || from == "" || to == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã region, from –∏ to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	ctx := context.Background()

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	start, err := time.Parse(time.RFC3339, from)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç from"})
		return
	}

	end, err := time.Parse(time.RFC3339, to)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç to"})
		return
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã (–æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è)
	startDate := time.Date(start.Year(), start.Month(), start.Day(), 0, 0, 0, 0, start.Location())
	endDate := time.Date(end.Year(), end.Month(), end.Day(), 0, 0, 0, 0, end.Location())

	fmt.Printf("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '%s' —Å %s –ø–æ %s\n",
		region, startDate.Format("2006-01-02"), endDate.Format("2006-01-02"))

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ –¥–∞—Ç–µ
		{{Key: "$match", Value: bson.M{
			"region": region,
			"searchFields.dateTime": bson.M{
				"$gte": startDate,
				"$lte": endDate.Add(24*time.Hour - time.Second),
			},
		}}},
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
		{{Key: "$project", Value: bson.M{
			"date": bson.M{
				"$dateToString": bson.M{
					"format": "%Y-%m-%d",
					"date":   "$searchFields.dateTime",
				},
			},
		}}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
		{{Key: "$group", Value: bson.M{
			"_id":         "$date",
			"flightCount": bson.M{"$sum": 1},
		}}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.M{
			"_id":         0,
			"date":        "$_id",
			"flightCount": 1,
		}}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
		{{Key: "$sort", Value: bson.M{"date": 1}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var aggResults []bson.M
	if err := cursor.All(ctx, &aggResults); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	resultMap := make(map[string]int)
	for _, result := range aggResults {
		if date, ok := result["date"].(string); ok {
			if flightCount, ok := result["flightCount"].(int32); ok {
				resultMap[date] = int(flightCount)
			}
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
	var fullResults []bson.M
	for current := startDate; !current.After(endDate); current = current.AddDate(0, 0, 1) {
		dateStr := current.Format("2006-01-02")

		flightCount := 0
		if count, exists := resultMap[dateStr]; exists {
			flightCount = count
		}

		fullResults = append(fullResults, bson.M{
			"date":        dateStr,
			"flightCount": flightCount,
		})
	}

	fmt.Printf("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º: –Ω–∞–π–¥–µ–Ω–æ %d –¥–Ω–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏–∑ %d –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ\n",
		len(aggResults), len(fullResults))

	c.JSON(http.StatusOK, fullResults)
}

func getPeakHour(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	region := c.Query("region")
	date := c.Query("date")

	if region == "" || date == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã region –∏ date –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
	targetDate, err := time.Parse("2006-01-02", date)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç date. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"})
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –¥–Ω—è
	startOfDay := time.Date(targetDate.Year(), targetDate.Month(), targetDate.Day(), 0, 0, 0, 0, time.UTC)
	endOfDay := startOfDay.Add(24*time.Hour - time.Second)

	ctx := context.Background()

	fmt.Printf("‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Å–∞–º –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '%s' –∑–∞ %s\n", region, date)

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ –¥–∞—Ç–µ
		{{Key: "$match", Value: bson.M{
			"region": region,
			"searchFields.dateTime": bson.M{
				"$gte": startOfDay,
				"$lte": endOfDay,
			},
		}}},
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –∏–∑ datetime
		{{Key: "$project", Value: bson.M{
			"hour":             bson.M{"$hour": "$searchFields.dateTime"},
			"aircraftQuantity": "$shr.aircraftQuantity",
		}}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
		{{Key: "$group", Value: bson.M{
			"_id":         "$hour",
			"flightCount": bson.M{"$sum": 1},
			"droneCount":  bson.M{"$sum": "$aircraftQuantity"},
		}}},
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å –≤ —Å—Ç—Ä–æ–∫—É
		{{Key: "$project", Value: bson.M{
			"_id": 0,
			"hour": bson.M{
				"$concat": bson.A{
					bson.M{"$toString": "$_id"},
					":00",
				},
			},
			"flightCount": 1,
			"droneCount":  1,
		}}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—É
		{{Key: "$sort", Value: bson.M{"hour": 1}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìà –ù–∞–π–¥–µ–Ω–æ —á–∞—Å–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: %d\n", len(results))

	c.JSON(http.StatusOK, results)
}

func getTop10Regions(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	from := c.Query("from")
	to := c.Query("to")

	if from == "" || to == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã from –∏ to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	ctx := context.Background()

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	start, err := time.Parse(time.RFC3339, from)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç from"})
		return
	}

	end, err := time.Parse(time.RFC3339, to)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç to"})
		return
	}

	fmt.Printf("üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å %s –ø–æ %s\n", from, to)

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ searchFields.dateTime
		{{Key: "$match", Value: bson.M{
			"searchFields.dateTime": bson.M{
				"$gte": start,
				"$lte": end,
			},
		}}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª–µ—Ç—ã –∏ —Å—É–º–º—É –¥—Ä–æ–Ω–æ–≤
		{{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$region"},
			{Key: "flightCount", Value: bson.D{{Key: "$sum", Value: 1}}},
			{Key: "droneCount", Value: bson.D{
				{Key: "$sum", Value: bson.D{
					{Key: "$cond", Value: bson.A{
						bson.M{"$and": bson.A{
							bson.M{"$ne": bson.A{"$shr.aircraftQuantity", nil}},
							bson.M{"$gt": bson.A{"$shr.aircraftQuantity", 0}},
						}},
						"$shr.aircraftQuantity",
						1, // –µ—Å–ª–∏ aircraftQuantity –ø—É—Å—Ç–æ–µ –∏–ª–∏ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1
					}},
				}},
			}}},
		}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ flightCount –ø–æ —É–±—ã–≤–∞–Ω–∏—é
		{{Key: "$sort", Value: bson.M{"flightCount": -1}}},
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
		{{Key: "$limit", Value: 10}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.D{
			{Key: "_id", Value: 0},
			{Key: "region", Value: "$_id"},
			{Key: "flightCount", Value: 1},
			{Key: "droneCount", Value: 1},
		}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Ç–æ–ø-10: %d\n", len(results))

	/* 	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	   	for i, result := range results {
	   		fmt.Printf("üèÖ %d. –†–µ–≥–∏–æ–Ω: %s, –ø–æ–ª–µ—Ç–æ–≤: %v, –¥—Ä–æ–Ω–æ–≤: %v\n",
	   			i+1, result["region"], result["flightCount"], result["droneCount"])
	   	} */

	c.JSON(http.StatusOK, results)
}

func getAvgFlightDuration(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	from := c.Query("from")
	to := c.Query("to")

	if from == "" || to == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã from –∏ to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	ctx := context.Background()

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	start, err := time.Parse(time.RFC3339, from)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç from"})
		return
	}

	end, err := time.Parse(time.RFC3339, to)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç to"})
		return
	}

	fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–æ–≤ —Å %s –ø–æ %s\n", from, to)

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ searchFields.dateTime
		{{Key: "$match", Value: bson.M{
			"searchFields.dateTime": bson.M{
				"$gte": start,
				"$lte": end,
			},
		}}},
		// –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–¥–µ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞
		{{Key: "$match", Value: bson.M{
			"shr.flightDuration": bson.M{"$gt": 0},
		}}},
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–æ–Ω–æ–≤)
		{{Key: "$addFields", Value: bson.M{
			"weightedDuration": bson.M{
				"$multiply": bson.A{
					"$shr.flightDuration",
					bson.M{
						"$cond": bson.A{
							bson.M{"$and": bson.A{
								bson.M{"$ne": bson.A{"$shr.aircraftQuantity", nil}},
								bson.M{"$gt": bson.A{"$shr.aircraftQuantity", 0}},
							}},
							"$shr.aircraftQuantity",
							1, // –µ—Å–ª–∏ aircraftQuantity –ø—É—Å—Ç–æ–µ –∏–ª–∏ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1
						},
					},
				},
			},
		}}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
		{{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$region"},
			{Key: "avgDurationMinutes", Value: bson.M{"$avg": "$weightedDuration"}},
		}}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.D{
			{Key: "_id", Value: 0},
			{Key: "region", Value: "$_id"},
			{Key: "avgDurationMinutes", Value: bson.M{"$round": bson.A{"$avgDurationMinutes", 1}}}, // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
		}}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É
		{{Key: "$sort", Value: bson.M{"region": 1}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: %d\n", len(results))

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	/* 	for _, result := range results {
		fmt.Printf("üìä –†–µ–≥–∏–æ–Ω: %s, —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.1f –º–∏–Ω—É—Ç\n",
			result["region"], result["avgDurationMinutes"])
	} */

	c.JSON(http.StatusOK, results)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
func getFlightCount(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	from := c.Query("from")
	to := c.Query("to")

	if from == "" || to == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã from –∏ to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	ctx := context.Background()

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	start, err := time.Parse(time.RFC3339, from)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç from"})
		return
	}

	end, err := time.Parse(time.RFC3339, to)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç to"})
		return
	}

	fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å %s –ø–æ %s\n", from, to)

	filter := bson.M{
		"searchFields.dateTime": bson.M{
			"$gte": start,
			"$lte": end,
		},
	}

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Ä–µ–≥–∏–æ–Ω—É
		{{Key: "$match", Value: filter}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
		{{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$region"},
			{Key: "flightCount", Value: bson.D{{Key: "$sum", Value: 1}}},
			{Key: "droneCount", Value: bson.D{
				{Key: "$sum", Value: bson.D{
					{Key: "$cond", Value: bson.A{
						bson.D{{Key: "$eq", Value: bson.A{"$shr.aircraftQuantity", nil}}},
						0,
						bson.D{{Key: "$toInt", Value: "$shr.aircraftQuantity"}},
					}},
				}},
			}}},
		}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.D{
			{Key: "_id", Value: 0},
			{Key: "region", Value: "$_id"},
			{Key: "flightCount", Value: 1},
			{Key: "droneCount", Value: 1},
		}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: %d\n", len(results))
	c.JSON(http.StatusOK, results)
}

// –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ø–æ–ª–µ—Ç–æ–≤
func getHeatmapData(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä region –∏–∑ URL
	regionEncoded := c.Query("region")
	region, err := url.QueryUnescape(regionEncoded)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ region"})
		return
	}

	if region == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä region –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
		return
	}

	ctx := context.Background()

	cursor, err := flightDataCollection.Find(ctx, bson.M{"region": region})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	var coordinates []map[string]float64
	var noFoundCounter int
	for _, result := range results {
		var lat, lon float64
		found := false

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ dep->coordinates (–∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å lat/lon)
		if dep, ok := result["dep"].(bson.M); ok {
			if coords, ok := dep["coordinates"].(bson.M); ok {
				if latVal, ok := coords["lat"].(float64); ok {
					lat = latVal
				}
				if lonVal, ok := coords["lon"].(float64); ok { // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: "lon", –∞ –Ω–µ "lng"
					lon = lonVal
				}
				if lat != 0 || lon != 0 {
					found = true
				}
			}
		}

		// –ï—Å–ª–∏ –≤ dep->coordinates –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º shr->coordinatesDep
		if !found {
			if shr, ok := result["shr"].(bson.M); ok {
				if coordsDep, ok := shr["coordinatesDep"].(bson.M); ok {
					if latVal, ok := coordsDep["lat"].(float64); ok {
						lat = latVal
					}
					if lonVal, ok := coordsDep["lon"].(float64); ok {
						lon = lonVal
					}
					if lat != 0 || lon != 0 {
						found = true
					}
				}
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–π–¥–µ–Ω—ã
		if found {
			coordinates = append(coordinates, map[string]float64{
				"lat": lat,
				"lon": lon,
			})
		} else {
			noFoundCounter++
		}
	}

	if noFoundCounter > 0 {
		fmt.Printf("  ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è %d —Å—Ç—Ä–æ–∫ \n", noFoundCounter)
	}

	c.JSON(http.StatusOK, coordinates)
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ regionList
func getRegionList(c *gin.Context, collection useTables) {

	regionListCollection := collection.regionListCollection

	ctx := context.Background()

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	type RegionResponse struct {
		Region string `bson:"region" json:"region"`
	}

	cursor, err := regionListCollection.Find(ctx, bson.M{})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"})
		return
	}
	defer cursor.Close(ctx)

	var regions []RegionResponse
	// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ region –±–µ–∑ regionID
	if len(regions) == 0 {
		// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–µ–∫—Ü–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
		cursor, err := regionListCollection.Find(ctx, bson.M{}, options.Find().SetProjection(bson.M{"region": 1, "_id": 0}))
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"})
			return
		}
		defer cursor.Close(ctx)

		var simpleRegions []bson.M
		if err := cursor.All(ctx, &simpleRegions); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
			return
		}

		c.JSON(http.StatusOK, simpleRegions)
		return
	}

	c.JSON(http.StatusOK, regions)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
func healthCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "pong"})
}

// getExistingSIDs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func getExistingSIDs(collection *mongo.Collection) (map[int]bool, error) {
	ctx := context.Background()
	existingSIDs := make(map[int]bool)

	// –ü—Ä–æ–µ–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—è SID –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
	opts := options.Find().SetProjection(bson.M{"shr.sid": 1})

	cursor, err := collection.Find(ctx, bson.M{"shr.sid": bson.M{"$ne": nil}}, opts)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	var results []struct {
		SHR struct {
			SID *int `bson:"sid"`
		} `bson:"shr"`
	}

	if err := cursor.All(ctx, &results); err != nil {
		return nil, err
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ SID
	for _, result := range results {
		if result.SHR.SID != nil {
			existingSIDs[*result.SHR.SID] = true
		}
	}

	return existingSIDs, nil
}

// bulkInsert –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –≤—Å—Ç–∞–≤–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
func bulkInsert(collection *mongo.Collection, documents []any) error {
	ctx := context.Background()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—É—é –≤—Å—Ç–∞–≤–∫—É –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	opts := options.BulkWrite().SetOrdered(false)

	var models []mongo.WriteModel
	for _, doc := range documents {
		model := mongo.NewInsertOneModel().SetDocument(doc)
		models = append(models, model)
	}

	_, err := collection.BulkWrite(ctx, models, opts)
	return err
}

func validateHeaders(headers []string) bool {

	if len(headers) < 4 {
		return false
	}
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
	expectedHeaders := map[int]string{
		1: "shr",
		2: "dep",
		3: "arr",
	}

	for i, expected := range expectedHeaders {
		if i < len(headers) {
			actual := strings.ToLower(strings.TrimSpace(headers[i]))
			if actual != expected {
				fmt.Printf("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–ª–æ–Ω–∫–∏ %d: –æ–∂–∏–¥–∞–µ—Ç—Å—è '%s', –ø–æ–ª—É—á–µ–Ω–æ '%s'\n",
					i, expected, actual)
				return false
			}
		}
	}

	return true
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É
func uploadFiles(c *gin.Context, collection useTables, client *mongo.Client) {

	flightDataCollection := collection.flightDataCollection

	fmt.Println("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø MONGODB ===")

	file, err := c.FormFile("excel_file")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω"})
		return
	}

	uploadedFile, err := file.Open()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"})
		return
	}
	defer uploadedFile.Close()

	xlsxFile, err := excelize.OpenReader(uploadedFile)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel"})
		return
	}
	defer xlsxFile.Close()

	// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
	sheets := xlsxFile.GetSheetList()
	if len(sheets) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ"})
		return
	}

	firstSheet := sheets[0]
	fmt.Printf("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: %s\n", firstSheet)

	// –ü–û–¢–û–ö–û–í–û–ï —á—Ç–µ–Ω–∏–µ –ë–ï–ó –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å
	rowsStream, err := xlsxFile.Rows(firstSheet)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫"})
		return
	}
	defer rowsStream.Close()

	// –ß–∏—Ç–∞–µ–º –ü–ï–†–í–£–Æ —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏) –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –°–†–ê–ó–£
	if !rowsStream.Next() {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –ø—É—Å—Ç–æ–π"})
		return
	}

	headers, err := rowsStream.Columns(excelize.Options{
		RawCellValue: true,
	})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"})
		return
	}

	// –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–ì–û–õ–û–í–ö–û–í –ü–ï–†–ï–ù–ï–°–ï–ù–ê –ù–ê–í–ï–†–•
	if !validateHeaders(headers) {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞—é—Ç—Å—è –∫–æ–ª–æ–Ω–∫–∏: region, shr, dep, arr"})
		return
	}

	// –°–û–ó–î–ê–ï–ú –ì–ï–û–°–ï–†–í–ò–° –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
	geoService := geoSearch.NewGeoService(client) // client - –≤–∞—à MongoDB client
	geoParser := parsing.NewGeoIntegratedParser(geoService)

	// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SID –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
	existingSIDs, err := getExistingSIDs(flightDataCollection)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SID: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üîç –ù–∞–π–¥–µ–Ω–æ %d —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SID –≤ –±–∞–∑–µ\n", len(existingSIDs))

	// –ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
	jobs := make(chan []string, 50000)
	results := make(chan parsing.FlightData, 50000)

	// –ó–∞–ø—É—Å–∫–∞–µ–º worker'–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
	numWorkers := runtime.NumCPU()
	var wg sync.WaitGroup
	for w := 0; w < numWorkers; w++ {
		wg.Add(1)
		go func(workerID int) {
			defer wg.Done()
			for row := range jobs {
				flightData := geoParser.CreateFlightDataWithRegion(row)
				results <- flightData
			}
		}(w)
	}

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	go func() {
		wg.Wait()
		close(results)
	}()

	// –ß–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ü–û–¢–û–ö–û–í–û (–Ω–∞—á–∏–Ω–∞–µ–º —Å–æ –í–¢–û–†–û–ô —Å—Ç—Ä–æ–∫–∏, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤—É—é —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏)
	var documents []any
	var insertedCount int
	var duplicateCount int
	var totalProcessed int
	batchSize := 1000

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏–π
	go func() {
		// –ß–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π)
		for rowsStream.Next() {
			row, err := rowsStream.Columns(excelize.Options{
				RawCellValue: true,
			})
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: %v\n", err)
				continue
			}

			jobs <- row
		}
		close(jobs)

		if err := rowsStream.Error(); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–∞ —Å—Ç—Ä–æ–∫: %v\n", err)
		}
	}()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	for flightData := range results {
		totalProcessed++

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5000 —Å—Ç—Ä–æ–∫
		if totalProcessed%10000 == 0 {
			fmt.Printf("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d —Å—Ç—Ä–æ–∫\n", totalProcessed)
		}

		isUnique := true
		if _, exists := existingSIDs[flightData.SHRData.SID]; exists {
			isUnique = false
			duplicateCount++
		}

		if isUnique {
			documents = append(documents, flightData)
			existingSIDs[flightData.SHRData.SID] = true
			insertedCount++
		}

		// Bulk insert
		if len(documents) >= batchSize {
			if len(documents) > 0 {
				err := bulkInsert(flightDataCollection, documents)
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É: %v\n", err)
				}
				documents = nil
			}
		}
	}

	// –§–∏–Ω–∞–ª—å–Ω—ã–π bulk insert
	if len(documents) > 0 {
		err := bulkInsert(flightDataCollection, documents)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
		}
	}

	fmt.Printf("\nüìà –ò–¢–û–ì: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d —Å—Ç—Ä–æ–∫, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Å—Ç—Ä–æ–∫\n", totalProcessed, insertedCount)
	fmt.Println("=== –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´ –í MONGODB ===")

	//http –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{
		"message":        "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
		"totalRows":      insertedCount,
		"processed":      totalProcessed,
		"insertedCount":  insertedCount,
		"duplicateCount": duplicateCount,
		"collection":     "flightData",
	})
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
func updateRegionList(collection useTables) {

	regionListCollection := collection.regionListCollection
	subjectListCollection := collection.subjectListCollection

	ctx := context.Background()

	fmt.Println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤...")

	// –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é regionList
	_, err := regionListCollection.DeleteMany(ctx, bson.M{})
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ regionList: %v", err)
	}
	fmt.Println("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è regionList –æ—á–∏—â–µ–Ω–∞")

	// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ regionsGeo
	pipeline := mongo.Pipeline{
		{{Key: "$group", Value: bson.D{{Key: "_id", Value: "$name"}}}},
		{{Key: "$project", Value: bson.D{{Key: "name", Value: "$_id"}, {Key: "_id", Value: 0}}}},
		{{Key: "$sort", Value: bson.D{{Key: "name", Value: 1}}}},
	}

	cursor, err := subjectListCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
	}
	defer cursor.Close(ctx)

	var regions []bson.M
	if err := cursor.All(ctx, &regions); err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ regionList
	if len(regions) > 0 {
		var documents []any
		for i, region := range regions {
			// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
			document := bson.M{
				"regionID": i + 1,
				"region":   region["name"],
			}
			documents = append(documents, document)
		}

		documents = append(documents, bson.M{
			"regionID": len(documents) + 1,
			"region":   "–†–µ–≥–∏–æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
		})

		result, err := regionListCollection.InsertMany(ctx, documents)
		if err != nil {
			fmt.Printf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
		}

		fmt.Printf("üìà –í –∫–æ–ª–ª–µ–∫—Ü–∏—é regionList –¥–æ–±–∞–≤–ª–µ–Ω–æ %d —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤\n", len(result.InsertedIDs))
	} else {
		fmt.Println("‚ÑπÔ∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
	}

}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å—É–¥–æ–≤
func updateAircraftTypeList(collection useTables) {
	aircraftTypeList := collection.aircraftTypeListCollection
	flightDataCollection := collection.flightDataCollection

	ctx := context.Background()

	fmt.Println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ aircraftType...")

	// –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é aircraftTypeList
	_, err := aircraftTypeList.DeleteMany(ctx, bson.M{})
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ aircraftTypeList: %v\n", err)
		return
	}
	fmt.Println("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è aircraftTypeList –æ—á–∏—â–µ–Ω–∞")

	// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –í–° –∏–∑ flightData
	pipeline := mongo.Pipeline{
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ shr.aircraftType
		{{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$shr.aircraftType"},
		}}},
		// –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
		{{Key: "$match", Value: bson.M{
			"_id": bson.M{"$ne": nil},
		}}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.D{
			{Key: "_id", Value: 0},
			{Key: "aircraftType", Value: "$_id"},
		}}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –í–°
		{{Key: "$sort", Value: bson.M{"aircraftType": 1}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ aircraftTypeList: %v\n", err)
		return
	}
	defer cursor.Close(ctx)

	var aircraftTypes []bson.M
	if err := cursor.All(ctx, &aircraftTypes); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è aircraftTypeList: %v\n", err)
		return
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –í–° –≤ aircraftTypeList
	if len(aircraftTypes) > 0 {
		var documents []any

		for i, aircraftType := range aircraftTypes {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ aircraftType
			aircraftTypeValue, ok := aircraftType["aircraftType"].(string)
			if !ok || aircraftTypeValue == "" {
				continue
			}

			document := bson.M{
				"aircraftTypeID": i + 1,
				"aircraftType":   aircraftTypeValue,
			}
			documents = append(documents, document)
		}

		if len(documents) > 0 {
			result, err := aircraftTypeList.InsertMany(ctx, documents)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–∏–ø–æ–≤ aircraftTypeList: %v\n", err)
			} else {
				fmt.Printf("üìà –í –∫–æ–ª–ª–µ–∫—Ü–∏—é aircraftTypeList –¥–æ–±–∞–≤–ª–µ–Ω–æ %d —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –í–°\n", len(result.InsertedIDs))
			}
		}
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞
func exportFlightTable(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Ñ–æ—Ä–º–∞—Ç–∞
	format := c.DefaultQuery("format", "json")
	if format != "json" && format != "xlsx" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ json –∏–ª–∏ xlsx"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ç–µ –∂–µ —á—Ç–æ –∏ –≤ getFlightTable)
	aircraftType := c.Query("aircraftType")
	dateDepFrom := c.Query("dateDepFrom")
	dateDepTo := c.Query("dateDepTo")
	flightDurationMin := c.Query("flightDurationMin")
	flightDurationMax := c.Query("flightDurationMax")
	sid := c.Query("sid")
	region := c.Query("region")
	operatorType := c.Query("operatorType")

	ctx := context.Background()

	fmt.Printf("üì§ –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª–µ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ %s\n", format)

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ getFlightTable)
	filter := bson.M{}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
	if aircraftType != "" {
		aircraftTypes := strings.Split(aircraftType, ",")
		for i, at := range aircraftTypes {
			aircraftTypes[i] = strings.TrimSpace(at)
		}
		if len(aircraftTypes) == 1 {
			filter["shr.aircraftType"] = aircraftTypes[0]
		} else {
			filter["shr.aircraftType"] = bson.M{"$in": aircraftTypes}
		}
	}

	// –î–û–ë–ê–í–õ–Ø–ï–ú –§–ò–õ–¨–¢–† –ü–û –¢–ò–ü–£ –û–ü–ï–†–ê–¢–û–†–ê
	if operatorType != "" {
		operatorTypes := strings.Split(operatorType, ",")
		for i, ot := range operatorTypes {
			operatorTypes[i] = strings.TrimSpace(ot)
		}
		if len(operatorTypes) == 1 {
			filter["shr.operatorType"] = operatorTypes[0]
		} else {
			filter["shr.operatorType"] = bson.M{"$in": operatorTypes}
		}
		fmt.Printf("üè¢ –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: %v\n", operatorTypes)
	}

	start, _ := time.Parse(time.RFC3339, dateDepFrom)
	end, _ := time.Parse(time.RFC3339, dateDepTo)

	if dateDepFrom != "" {
		if dateDepTo != "" {
			filter["searchFields.dateTime"] = bson.M{
				"$gte": start,
				"$lte": end,
			}
		} else {
			filter["searchFields.dateTime"] = bson.M{"$gte": start}
		}
	} else if dateDepTo != "" {
		filter["searchFields.dateTime"] = bson.M{"$lte": end}
	}

	if sid != "" {
		if sidInt, err := strconv.Atoi(sid); err == nil {
			filter["shr.sid"] = sidInt
		}
	}

	if flightDurationMin != "" {
		durationMin, err := strconv.Atoi(flightDurationMin)
		if err == nil {
			if flightDurationMax != "" {
				durationMax, err := strconv.Atoi(flightDurationMax)
				if err == nil {
					if durationMin == 0 {
						filter["$or"] = []bson.M{
							{"shr.flightDuration": bson.M{"$gte": durationMin, "$lte": durationMax}},
							{"shr.flightDuration": nil},
						}
					} else {
						filter["shr.flightDuration"] = bson.M{
							"$gte": durationMin,
							"$lte": durationMax,
						}
					}
				}
			} else {
				if durationMin == 0 {
					filter["$or"] = []bson.M{
						{"shr.flightDuration": bson.M{"$gte": durationMin}},
						{"shr.flightDuration": nil},
					}
				} else {
					filter["shr.flightDuration"] = bson.M{"$gte": durationMin}
				}
			}
		}
	} else if flightDurationMax != "" {
		durationMax, err := strconv.Atoi(flightDurationMax)
		if err == nil {
			filter["shr.flightDuration"] = bson.M{"$lte": durationMax}
		}
	}

	if region != "" {
		filter["region"] = region
	}

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
	pipeline := mongo.Pipeline{}

	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–¥–∏—é match –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
	if len(filter) > 0 {
		pipeline = append(pipeline, bson.D{{Key: "$match", Value: filter}})
	}

	// –ü—Ä–æ–µ–∫—Ü–∏—è –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
	pipeline = append(pipeline, bson.D{{Key: "$project", Value: bson.M{
		"region":           1,
		"sid":              "$shr.sid",
		"aircraftIndex":    "$shr.aircraftIndex",
		"aircraftType":     "$shr.aircraftType",
		"aircraftQuantity": "$shr.aircraftQuantity",
		"operator":         "$shr.operator",
		"operatorType":     "$shr.operatorType",
		"dateDep":          "$searchFields.dateTime",
		"dateArr":          "$searchFields.arrDatetime",
		"flightDuration":   "$shr.flightDuration",
		"coordinatesDep": bson.M{
			"$let": bson.M{
				"vars": bson.M{
					"depCoords": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ifNull": bson.A{"$dep.coordinates.lat", false}},
								bson.M{"$ifNull": bson.A{"$dep.coordinates.lon", false}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$dep.coordinates.lat"},
									" ",
									bson.M{"$toString": "$dep.coordinates.lon"},
								},
							},
							"else": nil,
						},
					},
					"shrCoords": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ifNull": bson.A{"$shr.coordinatesDep.lat", false}},
								bson.M{"$ifNull": bson.A{"$shr.coordinatesDep.lon", false}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$shr.coordinatesDep.lat"},
									" ",
									bson.M{"$toString": "$shr.coordinatesDep.lon"},
								},
							},
							"else": nil,
						},
					},
				},
				"in": bson.M{"$ifNull": bson.A{"$$depCoords", "$$shrCoords"}},
			},
		},
		"coordinatesArr": bson.M{
			"$let": bson.M{
				"vars": bson.M{
					"arrCoords": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ifNull": bson.A{"$arr.coordinates.lat", false}},
								bson.M{"$ifNull": bson.A{"$arr.coordinates.lon", false}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$arr.coordinates.lat"},
									" ",
									bson.M{"$toString": "$arr.coordinates.lon"},
								},
							},
							"else": nil,
						},
					},
					"shrCoords": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ifNull": bson.A{"$shr.coordinatesArr.lat", false}},
								bson.M{"$ifNull": bson.A{"$shr.coordinatesArr.lon", false}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$shr.coordinatesArr.lat"},
									" ",
									bson.M{"$toString": "$shr.coordinatesArr.lon"},
								},
							},
							"else": nil,
						},
					},
				},
				"in": bson.M{"$ifNull": bson.A{"$$arrCoords", "$$shrCoords"}},
			},
		},
	}}})

	// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ sid
	pipeline = append(pipeline, bson.D{{Key: "$sort", Value: bson.M{"sid": 1}}})

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è %d –∑–∞–ø–∏—Å–µ–π\n", len(results))

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
	timestamp := time.Now().Format("02-01-2006")
	filename := fmt.Sprintf("flights_export_%s", timestamp)

	switch format {
	case "json":
		exportJSON(c, results, filename)
	case "xlsx":
		exportXLSX(c, results, filename)
	}
}

// exportJSON —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
func exportJSON(c *gin.Context, data []bson.M, filename string) {
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å—Ç—ã–π JSON
	jsonData, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è JSON"})
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	c.Header("Content-Description", "File Transfer")
	c.Header("Content-Disposition", "attachment; filename="+filename+".json")
	c.Header("Content-Type", "application/json")
	c.Header("Content-Length", strconv.Itoa(len(jsonData)))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	c.Data(http.StatusOK, "application/json", jsonData)

	fmt.Printf("‚úÖ JSON —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: %s.json\n", filename)
}

// exportXLSX —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ XLSX —Ñ–∞–π–ª
func exportXLSX(c *gin.Context, data []bson.M, filename string) {
	file := xlsx.NewFile()
	sheet, err := file.AddSheet("Flights")
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è XLSX —Ñ–∞–π–ª–∞"})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ - –î–û–ë–ê–í–õ–Ø–ï–ú –û–ü–ï–†–ê–¢–û–†–ê –ò –¢–ò–ü –û–ü–ï–†–ê–¢–û–†–ê
	headers := []string{
		"–†–µ–≥–∏–æ–Ω", "–°–∏—Å—Ç–µ–º–Ω—ã–π ID", "–ò–Ω–¥–µ–∫—Å –í–°", "–¢–∏–ø –í–°", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í–°",
		"–í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞", "–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞ (–º–∏–Ω)",
		"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–ª–µ—Ç–∞", "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–±—ã—Ç–∏—è", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–¢–∏–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
	}

	headerRow := sheet.AddRow()
	for _, header := range headers {
		cell := headerRow.AddCell()
		cell.Value = header
		cell.GetStyle().Font.Bold = true
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
	for _, record := range data {
		row := sheet.AddRow()

		// –†–µ–≥–∏–æ–Ω
		if region, ok := record["region"].(string); ok {
			row.AddCell().Value = region
		} else {
			row.AddCell().Value = ""
		}

		// SID
		if sid, ok := record["sid"].(int64); ok {
			row.AddCell().SetString(fmt.Sprint(sid))
		} else {
			row.AddCell().Value = ""
		}

		// –ò–Ω–¥–µ–∫—Å –í–°
		if aircraftIndex, ok := record["aircraftIndex"].(string); ok {
			row.AddCell().Value = aircraftIndex
		} else {
			row.AddCell().Value = ""
		}

		// –¢–∏–ø –í–°
		if aircraftType, ok := record["aircraftType"].(string); ok {
			row.AddCell().Value = aircraftType
		} else {
			row.AddCell().Value = ""
		}

		// –ö–æ–ª-–≤–æ –í–°
		if aircraftQuantity, ok := record["aircraftQuantity"].(int32); ok {
			row.AddCell().SetInt(int(aircraftQuantity))
		} else {
			row.AddCell().Value = ""
		}

		// –î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞
		if dateDep, ok := record["dateDep"].(primitive.DateTime); ok {
			row.AddCell().Value = time.Unix(int64(dateDep)/1000, 0).Format("02.01.2006 15:04")
		} else {
			row.AddCell().Value = ""
		}

		// –î–∞—Ç–∞ –ø—Ä–∏–ª–µ—Ç–∞
		if dateArr, ok := record["dateArr"].(primitive.DateTime); ok {
			row.AddCell().Value = time.Unix(int64(dateArr)/1000, 0).Format("02.01.2006 15:04")
		} else {
			row.AddCell().Value = ""
		}

		// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞
		if flightDuration, ok := record["flightDuration"].(float64); ok {
			row.AddCell().SetInt(int(flightDuration))
		} else {
			row.AddCell().Value = ""
		}

		// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–ª–µ—Ç–∞
		if coordsDep, ok := record["coordinatesDep"].(string); ok {
			row.AddCell().Value = coordsDep
		} else {
			row.AddCell().Value = ""
		}

		// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–ª–µ—Ç–∞
		if coordsArr, ok := record["coordinatesArr"].(string); ok {
			row.AddCell().Value = coordsArr
		} else {
			row.AddCell().Value = ""
		}

		// –û–ø–µ—Ä–∞—Ç–æ—Ä
		if operator, ok := record["operator"].(string); ok {
			row.AddCell().Value = operator
		} else {
			row.AddCell().Value = ""
		}

		// –¢–∏–ø –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
		if operatorType, ok := record["operatorType"].(string); ok {
			row.AddCell().Value = operatorType
		} else {
			row.AddCell().Value = ""
		}

	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
	var buf bytes.Buffer
	if err := file.Write(&buf); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è XLSX —Ñ–∞–π–ª–∞"})
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
	c.Header("Content-Description", "File Transfer")
	c.Header("Content-Disposition", "attachment; filename="+filename+".xlsx")
	c.Header("Content-Type", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
	c.Header("Content-Length", strconv.Itoa(buf.Len()))

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
	c.Data(http.StatusOK, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", buf.Bytes())

	fmt.Printf("‚úÖ XLSX —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: %s.xlsx\n", filename)
}

/* // –ò–ª–∏ –µ—â–µ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
func formatDateTimeShort(t time.Time) string {
	return fmt.Sprintf("%02d.%02d.%d %d:%02d",
		t.Day(), t.Month(), t.Year(),
		t.Hour(), t.Minute())
} */
