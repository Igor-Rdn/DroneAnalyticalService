package handlers

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"project/packages/mongodb"
	"project/packages/parsing"

	"github.com/gin-gonic/gin"
	"github.com/xuri/excelize/v2"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func RegisterRoutes(r *gin.Engine, client *mongo.Client) {

	r.GET("/ping", healthCheck)

	r.POST("/upload", func(c *gin.Context) {

		flightDataCollection := mongodb.GetCollection(client, "admin", "flightData")
		regionListCollection := mongodb.GetCollection(client, "admin", "regionList")
		uploadFiles(c, flightDataCollection)
		updateRegionList(flightDataCollection, regionListCollection)
	})

	r.GET("/regions", func(c *gin.Context) {
		collection := mongodb.GetCollection(client, "admin", "regionList")
		getRegionList(c, collection)

	})

}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ regionList
func getRegionList(c *gin.Context, collection *mongo.Collection) {
	ctx := context.Background()

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	type RegionResponse struct {
		Region string `bson:"region" json:"region"`
	}

	cursor, err := collection.Find(ctx, bson.M{})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"})
		return
	}
	defer cursor.Close(ctx)

	var regions []RegionResponse
	// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ region –±–µ–∑ regionID
	if len(regions) == 0 {
		// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–µ–∫—Ü–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
		cursor, err := collection.Find(ctx, bson.M{}, options.Find().SetProjection(bson.M{"region": 1, "_id": 0}))
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"})
			return
		}
		defer cursor.Close(ctx)

		var simpleRegions []bson.M
		if err := cursor.All(ctx, &simpleRegions); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
			return
		}

		c.JSON(http.StatusOK, simpleRegions)
		return
	}

	c.JSON(http.StatusOK, regions)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
func healthCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "pong"})
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É
func uploadFiles(c *gin.Context, flightDataCollection *mongo.Collection) {

	fmt.Println("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø MONGODB ===")

	file, err := c.FormFile("excel_file")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω"})
		return
	}

	uploadedFile, err := file.Open()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"})
		return
	}
	defer uploadedFile.Close()

	xlsxFile, err := excelize.OpenReader(uploadedFile)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel"})
		return
	}
	defer xlsxFile.Close()

	// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
	sheets := xlsxFile.GetSheetList()
	if len(sheets) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ"})
		return
	}

	firstSheet := sheets[0]
	fmt.Printf("üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: %s\n", firstSheet)

	rows, err := xlsxFile.GetRows(firstSheet)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫"})
		return
	}

	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫) –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	var insertedCount int
	for i, row := range rows[1:] {

		flightData := parsing.CreateFlightData(i+1, row)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
		result, err := flightDataCollection.InsertOne(context.Background(), flightData)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ %d: %v", i+1, err)
			continue
		}

		fmt.Printf("‚úÖ –°—Ç—Ä–æ–∫–∞ %d —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: %v\n", i+1, result.InsertedID)
		insertedCount++

	}

	fmt.Printf("\nüìà –ò–¢–û–ì: –°—á–∏—Ç–∞–Ω–æ %d —Å—Ç—Ä–æ–∫, —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Å—Ç—Ä–æ–∫\n", len(rows)-1, insertedCount)
	fmt.Println("=== –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´ –í MONGODB ===")

	//http –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{
		"message":        "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MongoDB",
		"total_rows":     len(rows) - 1,
		"inserted_count": insertedCount,
		"collection":     "flightData",
	})

}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
func updateRegionList(flightDataCollection *mongo.Collection, regionListCollection *mongo.Collection) {

	ctx := context.Background()

	fmt.Println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤...")

	// –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é regionList
	_, err := regionListCollection.DeleteMany(ctx, bson.M{})
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ regionList: %v", err)
	}
	fmt.Println("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è regionList –æ—á–∏—â–µ–Ω–∞")

	// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ flightData
	pipeline := mongo.Pipeline{
		{{Key: "$group", Value: bson.D{{Key: "_id", Value: "$region"}}}},
		{{Key: "$project", Value: bson.D{{Key: "region", Value: "$_id"}, {Key: "_id", Value: 0}}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
	}
	defer cursor.Close(ctx)

	var regions []bson.M
	if err := cursor.All(ctx, &regions); err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ regionList
	if len(regions) > 0 {
		var documents []any
		for i, region := range regions {
			// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
			document := bson.M{
				"regionID": i + 1,
				"region":   region["region"],
			}
			documents = append(documents, document)
		}

		result, err := regionListCollection.InsertMany(ctx, documents)
		if err != nil {
			fmt.Printf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
		}

		fmt.Printf("‚úÖ –í –∫–æ–ª–ª–µ–∫—Ü–∏—é regionList –¥–æ–±–∞–≤–ª–µ–Ω–æ %d —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤\n", len(result.InsertedIDs))
	} else {
		fmt.Println("‚ÑπÔ∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
	}

}
