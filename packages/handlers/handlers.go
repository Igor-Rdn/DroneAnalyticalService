package handlers

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"net/url"
	"project/packages/auth"
	"project/packages/mongodb"
	"project/packages/parsing"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/xuri/excelize/v2"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type useTables struct {
	flightDataCollection *mongo.Collection
	regionListCollection *mongo.Collection
}

func RegisterRoutes(r *gin.Engine, client *mongo.Client) {

	var tables = useTables{
		mongodb.GetCollection(client, "admin", "flightData"),
		mongodb.GetCollection(client, "admin", "regionList"),
	}

	r.GET("/ping", healthCheck)
	r.GET("/regions", func(c *gin.Context) { getRegionList(c, tables) })
	r.GET("/heatmap", func(c *gin.Context) { getHeatmapData(c, tables) })
	r.GET("/flight-count", func(c *gin.Context) { getFlightCount(c, tables) })
	r.GET("/avg-flight-duration", func(c *gin.Context) { getAvgFlightDuration(c, tables) })
	r.GET("/top-10", func(c *gin.Context) { getTop10Regions(c, tables) })
	r.GET("/peak-hour", func(c *gin.Context) { getPeakHour(c, tables) })
	r.GET("/region/yearly-stats", func(c *gin.Context) { getYearlyStats(c, tables) })
	r.GET("/flights-table", func(c *gin.Context) { getFlightTable(c, tables) })

	r.POST("/upload", auth.RequireRealmRole("admin"), func(c *gin.Context) {
		uploadFiles(c, tables)
		updateRegionList(tables)
	})

}

func getFlightTable(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	page := c.DefaultQuery("page", "1")
	limit := c.DefaultQuery("limit", "20")

	pageInt, err := strconv.Atoi(page)
	if err != nil || pageInt < 1 {
		pageInt = 1
	}

	limitInt, err := strconv.Atoi(limit)
	if err != nil || limitInt < 1 {
		limitInt = 50
	}
	if limitInt > 1000 {
		limitInt = 1000
	}

	// –í—ã—á–∏—Å–ª—è–µ–º skip
	skip := (pageInt - 1) * limitInt

	ctx := context.Background()

	fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª–µ—Ç–æ–≤ - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d, –ª–∏–º–∏—Ç %d\n", pageInt, limitInt)

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –ü—Ä–æ–µ–∫—Ü–∏—è –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
		{{Key: "$project", Value: bson.M{
			"region":           1,
			"sid":              "$shr.sid",
			"aircraftIndex":    "$shr.aircraftIndex",
			"aircraftType":     "$shr.aircraftType",
			"aircraftQuantity": "$shr.aircraftQuantity",
			"dateDep":          "$searchFields.dateTime",                        // –∏—Å–ø–æ–ª—å–∑—É–µ–º searchFields.dateTime –∫–∞–∫ dateDep
			"dateArr":          bson.M{"$ifNull": bson.A{"$arr.dateTime", nil}}, // arr.dateTime –∫–∞–∫ dateArr
			"flightDuration":   "$shr.flightDuration",
			// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–ª–µ—Ç–∞ - coalesce(dep.coordinates, shr.coordinatesDep)
			"coordinatesDep": bson.M{
				"$cond": bson.M{
					"if": bson.M{"$and": bson.A{
						bson.M{"$ne": bson.A{"$dep.coordinates", nil}},
					}},
					"then": bson.M{
						"$concat": bson.A{
							bson.M{"$toString": "$dep.coordinates.lat"},
							" ",
							bson.M{"$toString": "$dep.coordinates.lon"},
						},
					},
					"else": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ne": bson.A{"$shr.coordinatesDep", nil}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$shr.coordinatesDep.lat"},
									" ",
									bson.M{"$toString": "$shr.coordinatesDep.lon"},
								},
							},
							"else": "",
						},
					},
				},
			},
			// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–ª–µ—Ç–∞ - coalesce(arr.coordinates, shr.coordinatesArr)
			"coordinatesArr": bson.M{
				"$cond": bson.M{
					"if": bson.M{"$and": bson.A{
						bson.M{"$ne": bson.A{"$arr.coordinates", nil}},
					}},
					"then": bson.M{
						"$concat": bson.A{
							bson.M{"$toString": "$arr.coordinates.lat"},
							" ",
							bson.M{"$toString": "$arr.coordinates.lon"},
						},
					},
					"else": bson.M{
						"$cond": bson.M{
							"if": bson.M{"$and": bson.A{
								bson.M{"$ne": bson.A{"$shr.coordinatesArr", nil}},
							}},
							"then": bson.M{
								"$concat": bson.A{
									bson.M{"$toString": "$shr.coordinatesArr.lat"},
									" ",
									bson.M{"$toString": "$shr.coordinatesArr.lon"},
								},
							},
							"else": "",
						},
					},
				},
			},
			"rawText": "$shr.rawText",
		}}},
		// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –≤—ã–ª–µ—Ç–∞ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
		{{Key: "$sort", Value: bson.M{"sid": 1}}},
		// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
		{{Key: "$skip", Value: skip}},
		{{Key: "$limit", Value: limitInt}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	totalCount, err := flightDataCollection.CountDocuments(ctx, bson.M{})
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: %v\n", err)
		totalCount = 0
	}

	fmt.Printf("üìà –ü–æ–ª—É—á–µ–Ω–æ %d –∑–∞–ø–∏—Å–µ–π –∏–∑ %d (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d)\n", len(results), totalCount, pageInt)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
	response := bson.M{
		"data": results,
		"pagination": bson.M{
			"page":       pageInt,
			"limit":      limitInt,
			"total":      totalCount,
			"totalPages": (totalCount + int64(limitInt) - 1) / int64(limitInt),
		},
	}

	c.JSON(http.StatusOK, response)
}

func getYearlyStats(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	region := c.Query("region")
	from := c.Query("from")
	to := c.Query("to")

	if region == "" || from == "" || to == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã region, from –∏ to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	ctx := context.Background()

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	start, err := time.Parse(time.RFC3339, from)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç from"})
		return
	}

	end, err := time.Parse(time.RFC3339, to)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç to"})
		return
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã (–æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è)
	startDate := time.Date(start.Year(), start.Month(), start.Day(), 0, 0, 0, 0, start.Location())
	endDate := time.Date(end.Year(), end.Month(), end.Day(), 0, 0, 0, 0, end.Location())

	fmt.Printf("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '%s' —Å %s –ø–æ %s\n",
		region, startDate.Format("2006-01-02"), endDate.Format("2006-01-02"))

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ –¥–∞—Ç–µ
		{{Key: "$match", Value: bson.M{
			"region": region,
			"searchFields.dateTime": bson.M{
				"$gte": startDate,
				"$lte": endDate.Add(24*time.Hour - time.Second),
			},
		}}},
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
		{{Key: "$project", Value: bson.M{
			"date": bson.M{
				"$dateToString": bson.M{
					"format": "%Y-%m-%d",
					"date":   "$searchFields.dateTime",
				},
			},
		}}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
		{{Key: "$group", Value: bson.M{
			"_id":         "$date",
			"flightCount": bson.M{"$sum": 1},
		}}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.M{
			"_id":         0,
			"date":        "$_id",
			"flightCount": 1,
		}}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
		{{Key: "$sort", Value: bson.M{"date": 1}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var aggResults []bson.M
	if err := cursor.All(ctx, &aggResults); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–∞–ø—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	resultMap := make(map[string]int)
	for _, result := range aggResults {
		if date, ok := result["date"].(string); ok {
			if flightCount, ok := result["flightCount"].(int32); ok {
				resultMap[date] = int(flightCount)
			}
		}
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
	var fullResults []bson.M
	for current := startDate; !current.After(endDate); current = current.AddDate(0, 0, 1) {
		dateStr := current.Format("2006-01-02")

		flightCount := 0
		if count, exists := resultMap[dateStr]; exists {
			flightCount = count
		}

		fullResults = append(fullResults, bson.M{
			"date":        dateStr,
			"flightCount": flightCount,
		})
	}

	fmt.Printf("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º: –Ω–∞–π–¥–µ–Ω–æ %d –¥–Ω–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏–∑ %d –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ\n",
		len(aggResults), len(fullResults))

	c.JSON(http.StatusOK, fullResults)
}

func getPeakHour(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	region := c.Query("region")
	date := c.Query("date")

	if region == "" || date == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã region –∏ date –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
	targetDate, err := time.Parse("2006-01-02", date)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç date. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"})
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –¥–Ω—è
	startOfDay := time.Date(targetDate.Year(), targetDate.Month(), targetDate.Day(), 0, 0, 0, 0, time.UTC)
	endOfDay := startOfDay.Add(24*time.Hour - time.Second)

	ctx := context.Background()

	fmt.Printf("‚è∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —á–∞—Å–∞–º –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ '%s' –∑–∞ %s\n", region, date)

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ –¥–∞—Ç–µ
		{{Key: "$match", Value: bson.M{
			"region": region,
			"searchFields.dateTime": bson.M{
				"$gte": startOfDay,
				"$lte": endOfDay,
			},
		}}},
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –∏–∑ datetime
		{{Key: "$project", Value: bson.M{
			"hour":             bson.M{"$hour": "$searchFields.dateTime"},
			"aircraftQuantity": "$shr.aircraftQuantity",
		}}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
		{{Key: "$group", Value: bson.M{
			"_id":         "$hour",
			"flightCount": bson.M{"$sum": 1},
			"droneCount":  bson.M{"$sum": "$aircraftQuantity"},
		}}},
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å –≤ —Å—Ç—Ä–æ–∫—É
		{{Key: "$project", Value: bson.M{
			"_id": 0,
			"hour": bson.M{
				"$concat": bson.A{
					bson.M{"$toString": "$_id"},
					":00",
				},
			},
			"flightCount": 1,
			"droneCount":  1,
		}}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—É
		{{Key: "$sort", Value: bson.M{"hour": 1}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìà –ù–∞–π–¥–µ–Ω–æ —á–∞—Å–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é: %d\n", len(results))

	c.JSON(http.StatusOK, results)
}

func getTop10Regions(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	from := c.Query("from")
	to := c.Query("to")

	if from == "" || to == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã from –∏ to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	ctx := context.Background()

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	start, err := time.Parse(time.RFC3339, from)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç from"})
		return
	}

	end, err := time.Parse(time.RFC3339, to)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç to"})
		return
	}

	fmt.Printf("üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å %s –ø–æ %s\n", from, to)

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ searchFields.dateTime
		{{Key: "$match", Value: bson.M{
			"searchFields.dateTime": bson.M{
				"$gte": start,
				"$lte": end,
			},
		}}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª–µ—Ç—ã –∏ —Å—É–º–º—É –¥—Ä–æ–Ω–æ–≤
		{{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$region"},
			{Key: "flightCount", Value: bson.D{{Key: "$sum", Value: 1}}},
			{Key: "droneCount", Value: bson.D{
				{Key: "$sum", Value: bson.D{
					{Key: "$cond", Value: bson.A{
						bson.M{"$and": bson.A{
							bson.M{"$ne": bson.A{"$shr.aircraftQuantity", nil}},
							bson.M{"$gt": bson.A{"$shr.aircraftQuantity", 0}},
						}},
						"$shr.aircraftQuantity",
						1, // –µ—Å–ª–∏ aircraftQuantity –ø—É—Å—Ç–æ–µ –∏–ª–∏ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1
					}},
				}},
			}}},
		}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ flightCount –ø–æ —É–±—ã–≤–∞–Ω–∏—é
		{{Key: "$sort", Value: bson.M{"flightCount": -1}}},
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
		{{Key: "$limit", Value: 10}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.D{
			{Key: "_id", Value: 0},
			{Key: "region", Value: "$_id"},
			{Key: "flightCount", Value: 1},
			{Key: "droneCount", Value: 1},
		}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ —Ç–æ–ø-10: %d\n", len(results))

	/* 	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	   	for i, result := range results {
	   		fmt.Printf("üèÖ %d. –†–µ–≥–∏–æ–Ω: %s, –ø–æ–ª–µ—Ç–æ–≤: %v, –¥—Ä–æ–Ω–æ–≤: %v\n",
	   			i+1, result["region"], result["flightCount"], result["droneCount"])
	   	} */

	c.JSON(http.StatusOK, results)
}

func getAvgFlightDuration(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	from := c.Query("from")
	to := c.Query("to")

	if from == "" || to == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã from –∏ to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	ctx := context.Background()

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	start, err := time.Parse(time.RFC3339, from)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç from"})
		return
	}

	end, err := time.Parse(time.RFC3339, to)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç to"})
		return
	}

	fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–æ–≤ —Å %s –ø–æ %s\n", from, to)

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ searchFields.dateTime
		{{Key: "$match", Value: bson.M{
			"searchFields.dateTime": bson.M{
				"$gte": start,
				"$lte": end,
			},
		}}},
		// –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≥–¥–µ –µ—Å—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞
		{{Key: "$match", Value: bson.M{
			"shr.flightDuration": bson.M{"$gt": 0},
		}}},
		// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ —Å –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä–æ–Ω–æ–≤)
		{{Key: "$addFields", Value: bson.M{
			"weightedDuration": bson.M{
				"$multiply": bson.A{
					"$shr.flightDuration",
					bson.M{
						"$cond": bson.A{
							bson.M{"$and": bson.A{
								bson.M{"$ne": bson.A{"$shr.aircraftQuantity", nil}},
								bson.M{"$gt": bson.A{"$shr.aircraftQuantity", 0}},
							}},
							"$shr.aircraftQuantity",
							1, // –µ—Å–ª–∏ aircraftQuantity –ø—É—Å—Ç–æ–µ –∏–ª–∏ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1
						},
					},
				},
			},
		}}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ
		{{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$region"},
			{Key: "avgDurationMinutes", Value: bson.M{"$avg": "$weightedDuration"}},
		}}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.D{
			{Key: "_id", Value: 0},
			{Key: "region", Value: "$_id"},
			{Key: "avgDurationMinutes", Value: bson.M{"$round": bson.A{"$avgDurationMinutes", 1}}}, // –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
		}}},
		// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É
		{{Key: "$sort", Value: bson.M{"region": 1}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: %d\n", len(results))

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	/* 	for _, result := range results {
		fmt.Printf("üìä –†–µ–≥–∏–æ–Ω: %s, —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.1f –º–∏–Ω—É—Ç\n",
			result["region"], result["avgDurationMinutes"])
	} */

	c.JSON(http.StatusOK, results)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
func getFlightCount(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ query string
	from := c.Query("from")
	to := c.Query("to")

	if from == "" || to == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã from –∏ to –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
		return
	}

	ctx := context.Background()

	// –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
	start, err := time.Parse(time.RFC3339, from)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç from"})
		return
	}

	end, err := time.Parse(time.RFC3339, to)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç to"})
		return
	}

	fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å %s –ø–æ %s\n", from, to)

	filter := bson.M{
		"searchFields.dateTime": bson.M{
			"$gte": start,
			"$lte": end,
		},
	}

	// –°–æ–∑–¥–∞–µ–º pipeline –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
	pipeline := mongo.Pipeline{
		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Ä–µ–≥–∏–æ–Ω—É
		{{Key: "$match", Value: filter}},
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
		{{Key: "$group", Value: bson.D{
			{Key: "_id", Value: "$region"},
			{Key: "flightCount", Value: bson.D{{Key: "$sum", Value: 1}}},
			{Key: "droneCount", Value: bson.D{
				{Key: "$sum", Value: bson.D{
					{Key: "$cond", Value: bson.A{
						bson.D{{Key: "$eq", Value: bson.A{"$shr.aircraftQuantity", nil}}},
						0,
						bson.D{{Key: "$toInt", Value: "$shr.aircraftQuantity"}},
					}},
				}},
			}}},
		}},
		// –ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		{{Key: "$project", Value: bson.D{
			{Key: "_id", Value: 0},
			{Key: "region", Value: "$_id"},
			{Key: "flightCount", Value: 1},
			{Key: "droneCount", Value: 1},
		}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üìà –ù–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: %d\n", len(results))
	c.JSON(http.StatusOK, results)
}

// –ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ø–æ–ª–µ—Ç–æ–≤
func getHeatmapData(c *gin.Context, collection useTables) {
	flightDataCollection := collection.flightDataCollection

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä region –∏–∑ URL
	regionEncoded := c.Query("region")
	region, err := url.QueryUnescape(regionEncoded)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ region"})
		return
	}

	if region == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ü–∞—Ä–∞–º–µ—Ç—Ä region –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"})
		return
	}

	ctx := context.Background()

	cursor, err := flightDataCollection.Find(ctx, bson.M{"region": region})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	var coordinates []map[string]float64
	var noFoundCounter int
	for _, result := range results {
		var lat, lon float64
		found := false

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ dep->coordinates (–∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å lat/lon)
		if dep, ok := result["dep"].(bson.M); ok {
			if coords, ok := dep["coordinates"].(bson.M); ok {
				if latVal, ok := coords["lat"].(float64); ok {
					lat = latVal
				}
				if lonVal, ok := coords["lon"].(float64); ok { // –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: "lon", –∞ –Ω–µ "lng"
					lon = lonVal
				}
				if lat != 0 || lon != 0 {
					found = true
				}
			}
		}

		// –ï—Å–ª–∏ –≤ dep->coordinates –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º shr->coordinatesDep
		if !found {
			if shr, ok := result["shr"].(bson.M); ok {
				if coordsDep, ok := shr["coordinatesDep"].(bson.M); ok {
					if latVal, ok := coordsDep["lat"].(float64); ok {
						lat = latVal
					}
					if lonVal, ok := coordsDep["lon"].(float64); ok {
						lon = lonVal
					}
					if lat != 0 || lon != 0 {
						found = true
					}
				}
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–π–¥–µ–Ω—ã
		if found {
			coordinates = append(coordinates, map[string]float64{
				"lat": lat,
				"lon": lon,
			})
		} else {
			noFoundCounter++
		}
	}

	if noFoundCounter > 0 {
		fmt.Printf("  ‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –¥–ª—è %d —Å—Ç—Ä–æ–∫ \n", noFoundCounter)
	}

	c.JSON(http.StatusOK, coordinates)
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ regionList
func getRegionList(c *gin.Context, collection useTables) {

	regionListCollection := collection.regionListCollection

	ctx := context.Background()

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	type RegionResponse struct {
		Region string `bson:"region" json:"region"`
	}

	cursor, err := regionListCollection.Find(ctx, bson.M{})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"})
		return
	}
	defer cursor.Close(ctx)

	var regions []RegionResponse
	// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ region –±–µ–∑ regionID
	if len(regions) == 0 {
		// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä–æ–µ–∫—Ü–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
		cursor, err := regionListCollection.Find(ctx, bson.M{}, options.Find().SetProjection(bson.M{"region": 1, "_id": 0}))
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"})
			return
		}
		defer cursor.Close(ctx)

		var simpleRegions []bson.M
		if err := cursor.All(ctx, &simpleRegions); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
			return
		}

		c.JSON(http.StatusOK, simpleRegions)
		return
	}

	c.JSON(http.StatusOK, regions)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
func healthCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "pong"})
}

// getExistingSIDs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func getExistingSIDs(collection *mongo.Collection) (map[int]bool, error) {
	ctx := context.Background()
	existingSIDs := make(map[int]bool)

	// –ü—Ä–æ–µ–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ–ª—è SID –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
	opts := options.Find().SetProjection(bson.M{"shr.sid": 1})

	cursor, err := collection.Find(ctx, bson.M{"shr.sid": bson.M{"$ne": nil}}, opts)
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	var results []struct {
		SHR struct {
			SID *int `bson:"sid"`
		} `bson:"shr"`
	}

	if err := cursor.All(ctx, &results); err != nil {
		return nil, err
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ SID
	for _, result := range results {
		if result.SHR.SID != nil {
			existingSIDs[*result.SHR.SID] = true
		}
	}

	return existingSIDs, nil
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑—É
func uploadFiles(c *gin.Context, collection useTables) {

	flightDataCollection := collection.flightDataCollection

	fmt.Println("=== –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–• –î–õ–Ø MONGODB ===")

	/* 	// –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é flightData
	   	ctx := context.Background()
	   	_, err := flightDataCollection.DeleteMany(ctx, bson.M{})
	   	if err != nil {
	   		fmt.Printf("–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ flightData: %v", err)
	   	}
	   	fmt.Println("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è flightData –æ—á–∏—â–µ–Ω–∞")
	   	//–ö–æ–Ω–µ—Ü –æ—á–∏—Å—Ç–∫–∏ –£–î–ê–õ–ò–¢–¨ –ü–û–°–õ–ï –û–ö–û–ù–ß–ê–ù–ò–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò */

	file, err := c.FormFile("excel_file")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω"})
		return
	}

	uploadedFile, err := file.Open()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞"})
		return
	}
	defer uploadedFile.Close()

	xlsxFile, err := excelize.OpenReader(uploadedFile)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel"})
		return
	}
	defer xlsxFile.Close()

	// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
	sheets := xlsxFile.GetSheetList()
	if len(sheets) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ—Ç –ª–∏—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ"})
		return
	}

	firstSheet := sheets[0]
	fmt.Printf("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: %s\n", firstSheet)

	rows, err := xlsxFile.GetRows(firstSheet)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫"})
		return
	}

	totalRow := len(rows) - 1
	fmt.Printf("üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: %d\n", totalRow)

	// –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SID –∏–∑ –±–∞–∑—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
	existingSIDs, err := getExistingSIDs(flightDataCollection)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SID: %v\n", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	fmt.Printf("üîç –ù–∞–π–¥–µ–Ω–æ %d —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SID –≤ –±–∞–∑–µ\n", len(existingSIDs))

	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–æ–∫) –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
	var insertedCount int
	for i, row := range rows[1:] {

		flightData := parsing.CreateFlightData(i+1, row)

		if i%(totalRow/10) == 0 {
			fmt.Printf("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ %d%%\n", i*10/(totalRow/10))
		}

		insertedCount++

		sid := *flightData.SHRData.SID
		if _, exists := existingSIDs[sid]; exists {
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
		_, err := flightDataCollection.InsertOne(context.Background(), flightData)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ %d: %v", i+1, err)
			continue
		}

		existingSIDs[sid] = true

	}

	fmt.Printf("\nüìà –ò–¢–û–ì: –°—á–∏—Ç–∞–Ω–æ %d —Å—Ç—Ä–æ–∫, —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Å—Ç—Ä–æ–∫\n", len(rows)-1, insertedCount)
	fmt.Println("=== –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù–´ –í MONGODB ===")

	//http –æ—Ç–≤–µ—Ç
	c.JSON(http.StatusOK, gin.H{
		"message":        "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ MongoDB",
		"total_rows":     len(rows) - 1,
		"inserted_count": insertedCount,
		"collection":     "flightData",
	})

}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
func updateRegionList(collection useTables) {

	regionListCollection := collection.regionListCollection
	flightDataCollection := collection.flightDataCollection

	ctx := context.Background()

	fmt.Println("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤...")

	// –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é regionList
	_, err := regionListCollection.DeleteMany(ctx, bson.M{})
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ regionList: %v", err)
	}
	fmt.Println("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è regionList –æ—á–∏—â–µ–Ω–∞")

	// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ flightData
	pipeline := mongo.Pipeline{
		{{Key: "$group", Value: bson.D{{Key: "_id", Value: "$region"}}}},
		{{Key: "$project", Value: bson.D{{Key: "region", Value: "$_id"}, {Key: "_id", Value: 0}}}},
	}

	cursor, err := flightDataCollection.Aggregate(ctx, pipeline)
	if err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
	}
	defer cursor.Close(ctx)

	var regions []bson.M
	if err := cursor.All(ctx, &regions); err != nil {
		fmt.Printf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ regionList
	if len(regions) > 0 {
		var documents []any
		for i, region := range regions {
			// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
			document := bson.M{
				"regionID": i + 1,
				"region":   region["region"],
			}
			documents = append(documents, document)
		}

		result, err := regionListCollection.InsertMany(ctx, documents)
		if err != nil {
			fmt.Printf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤: %v", err)
		}

		fmt.Printf("üìà –í –∫–æ–ª–ª–µ–∫—Ü–∏—é regionList –¥–æ–±–∞–≤–ª–µ–Ω–æ %d —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤\n", len(result.InsertedIDs))
	} else {
		fmt.Println("‚ÑπÔ∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
	}

}
